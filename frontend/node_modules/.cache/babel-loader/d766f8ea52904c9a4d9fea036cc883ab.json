{"ast":null,"code":"var _jsxFileName = \"/Users/leecavazos/Desktop/COSC4353/COSC4353-1/frontend/src/components/authentication/register/RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport * as React from \"react\";\nimport { AutoComplete, ComboBox, MultiColumnComboBox, DropDownList, MultiSelect, DropDownTree } from '@progress/kendo-react-dropdowns';\nimport { useState } from 'react';\nimport { Icon } from '@iconify/react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport { useNavigate } from 'react-router-dom'; // material\n\nimport { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { Dropdown, Menu } from 'semantic-ui-react'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RegisterForm() {\n  _s();\n\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const States = [{\n    text: 'AL - Alabama'\n  }, {\n    text: \"AK - Alaska\"\n  }, {\n    text: \"AZ - Arizona\"\n  }, {\n    text: \"AR - Arkansas\"\n  }, {\n    text: \"CA - California\"\n  }, {\n    text: 'CO - Colorado'\n  }, {\n    text: \"CT - Connecticut\"\n  }, {\n    text: \"DE - Delaware\"\n  }, {\n    text: \"FL - Florida\"\n  }, {\n    text: \"GA - Georgia\"\n  }, {\n    text: 'HI - Hawaii'\n  }, {\n    text: 'ID - Idaho'\n  }, {\n    text: 'IL - Illinois'\n  }, {\n    text: 'IN - Indiana'\n  }, {\n    text: 'IA - Iowa'\n  }, {\n    text: 'KS - Kansas'\n  }, {\n    text: 'KY - Kentucky'\n  }, {\n    text: 'LA - Louisiana'\n  }, {\n    text: 'ME - Maine'\n  }, {\n    text: 'MD - Maryland'\n  }, {\n    text: 'MA - Massachusetts'\n  }, {\n    text: 'MI - Michigan'\n  }, {\n    text: 'MN - Minnesota'\n  }, {\n    text: 'MS - Mississippi'\n  }, {\n    text: 'MO - Missouri'\n  }, {\n    text: 'MT - Montana'\n  }, {\n    text: 'NE - Nebraska'\n  }, {\n    text: 'NV - Nevada'\n  }, {\n    text: 'NH - New Hampshire'\n  }, {\n    text: 'NJ - New Jersey'\n  }, {\n    text: 'NM - New Mexico'\n  }, {\n    text: 'NY - New York'\n  }, {\n    text: 'NC - North Carolina'\n  }, {\n    text: 'ND - North Dakota'\n  }, {\n    text: 'OH - Ohio'\n  }, {\n    text: 'OK - Oklahoma'\n  }, {\n    text: 'OR - Oregon'\n  }, {\n    text: 'PA - Pennsylvania'\n  }, {\n    text: 'RI - Rhode Island'\n  }, {\n    text: 'SC - South Carolina'\n  }, {\n    text: 'SD - South Dakota'\n  }, {\n    text: 'TN - Tennessee'\n  }, {\n    text: 'TX - Texas'\n  }, {\n    text: 'UT - Utah'\n  }, {\n    text: 'VA - Virginia'\n  }, {\n    text: 'VT - Vermont'\n  }, {\n    text: 'WA - Washington'\n  }, {\n    text: 'WI - Wisconsin'\n  }, {\n    text: 'WV - West Virginia'\n  }, {\n    text: 'WY - Wyoming'\n  }];\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('First name required'),\n    lastName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('Last name required'),\n    Address: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('Address is required'),\n    Address2: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').optional('Address is optional'),\n    City: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('City is required'),\n    State: Yup.string().min(2, 'Too Short!').max(2, 'Too Long').required('State is required'),\n    ZipCode: Yup.string().min(5, 'Too Short!').max(9, 'Too Long').required('ZipCode is required'),\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      Address: '',\n      Address2: '',\n      City: '',\n      State: '',\n      ZipCode: '',\n      email: '',\n      password: ''\n    },\n    validationSchema: RegisterSchema,\n    onSubmit: () => {\n      navigate('/dashboard', {\n        replace: true\n      });\n    }\n  });\n\n  const DropdownExampleSimple = () => /*#__PURE__*/_jsxDEV(Menu, {\n    compact: true,\n    children: /*#__PURE__*/_jsxDEV(Dropdown, {\n      text: \"Dropdown\",\n      options: States,\n      simple: true,\n      item: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n\n  const {\n    errors,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Stack, {\n          direction: {\n            xs: 'column',\n            sm: 'row'\n          },\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"First name\",\n            ...getFieldProps('firstName'),\n            error: Boolean(touched.firstName && errors.firstName),\n            helperText: touched.firstName && errors.firstName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Last name\",\n            ...getFieldProps('lastName'),\n            error: Boolean(touched.lastName && errors.lastName),\n            helperText: touched.lastName && errors.lastName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"address\",\n          type: \"Address\",\n          label: \"Address\",\n          ...getFieldProps('Address'),\n          error: Boolean(touched.Address && errors.Address),\n          helperText: touched.Address && errors.Address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"address\",\n          type: \"Address2\",\n          label: \"Address2 (Optional)\",\n          ...getFieldProps('Address2'),\n          error: Boolean(touched.Address2 && errors.Address2),\n          helperText: touched.Address2 && errors.Address2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: {\n            xs: 'column',\n            sm: 'row'\n          },\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            autoComplete: \"city\",\n            type: \"City\",\n            label: \"City\",\n            ...getFieldProps('City'),\n            error: Boolean(touched.City && errors.City),\n            helperText: touched.City && errors.City\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            autoComplete: \"state\",\n            type: \"State\",\n            label: \"State\",\n            ...getFieldProps('State'),\n            error: Boolean(touched.State && errors.State),\n            helperText: touched.State && errors.State\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            autoComplete: \"zipcode\",\n            type: \"ZipCode\",\n            label: \"ZipCode\",\n            ...getFieldProps('ZipCode'),\n            error: Boolean(touched.ZipCode && errors.ZipCode),\n            helperText: touched.ZipCode && errors.ZipCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"username\",\n          type: \"email\",\n          label: \"Email address\",\n          ...getFieldProps('email'),\n          error: Boolean(touched.email && errors.email),\n          helperText: touched.email && errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"current-password\",\n          type: showPassword ? 'text' : 'password',\n          label: \"Password\",\n          ...getFieldProps('password'),\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                edge: \"end\",\n                onClick: () => setShowPassword(prev => !prev),\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  icon: showPassword ? eyeFill : eyeOffFill\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 236,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 17\n            }, this)\n          },\n          error: Boolean(touched.password && errors.password),\n          helperText: touched.password && errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          loading: isSubmitting,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RegisterForm, \"TyfXYEpvWDWRGnFGjig1zuRer3M=\", false, function () {\n  return [useNavigate, useFormik];\n});\n\n_c = RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["/Users/leecavazos/Desktop/COSC4353/COSC4353-1/frontend/src/components/authentication/register/RegisterForm.js"],"names":["Yup","React","AutoComplete","ComboBox","MultiColumnComboBox","DropDownList","MultiSelect","DropDownTree","useState","Icon","useFormik","Form","FormikProvider","eyeFill","eyeOffFill","useNavigate","Stack","TextField","IconButton","InputAdornment","LoadingButton","Dropdown","Menu","RegisterForm","navigate","showPassword","setShowPassword","States","text","RegisterSchema","object","shape","firstName","string","min","max","required","lastName","Address","Address2","optional","City","State","ZipCode","email","password","formik","initialValues","validationSchema","onSubmit","replace","DropdownExampleSimple","errors","touched","handleSubmit","isSubmitting","getFieldProps","xs","sm","Boolean","endAdornment","prev"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport * as React from \"react\";\nimport { AutoComplete, ComboBox, MultiColumnComboBox, DropDownList, MultiSelect, DropDownTree } from '@progress/kendo-react-dropdowns';\nimport { useState } from 'react';\nimport { Icon } from '@iconify/react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport { useNavigate } from 'react-router-dom';\n// material\nimport { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { Dropdown, Menu } from 'semantic-ui-react'\n\n// ----------------------------------------------------------------------\n\nexport default function RegisterForm() {\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const States = [\n    {text: 'AL - Alabama'},\n    {text: \"AK - Alaska\"},\n    {text: \"AZ - Arizona\"},\n    {text: \"AR - Arkansas\"},\n    {text: \"CA - California\"},\n    {text:'CO - Colorado'},\n    {text:\"CT - Connecticut\"},\n    {text:\"DE - Delaware\"},\n    {text:\"FL - Florida\"},\n    {text:\"GA - Georgia\"},\n    {text:'HI - Hawaii'},\n    {text:'ID - Idaho'},\n    {text:'IL - Illinois'},\n    {text:'IN - Indiana'},\n    {text:'IA - Iowa'},\n    {text:'KS - Kansas'},\n    {text:'KY - Kentucky'},\n    {text:'LA - Louisiana'},\n    {text:'ME - Maine'},\n    {text:'MD - Maryland'},\n    {text:'MA - Massachusetts'},\n    {text:'MI - Michigan'},\n    {text:'MN - Minnesota'},\n    {text:'MS - Mississippi'},\n    {text:'MO - Missouri'},\n    {text:'MT - Montana'},\n    {text:'NE - Nebraska'},\n    {text:'NV - Nevada'},\n    {text:'NH - New Hampshire'},\n    {text:'NJ - New Jersey'},\n    {text:'NM - New Mexico'},\n    {text:'NY - New York'},\n    {text:'NC - North Carolina'},\n    {text:'ND - North Dakota'},\n    {text:'OH - Ohio'},\n    {text:'OK - Oklahoma'},\n    {text:'OR - Oregon'},\n    {text:'PA - Pennsylvania'},\n    {text:'RI - Rhode Island'},\n    {text:'SC - South Carolina'},\n    {text:'SD - South Dakota'},\n    {text:'TN - Tennessee'},\n    {text:'TX - Texas'},\n    {text:'UT - Utah'},\n    {text:'VA - Virginia'},\n    {text:'VT - Vermont'},\n    {text:'WA - Washington'},\n    {text:'WI - Wisconsin'},\n    {text:'WV - West Virginia'},\n    {text:'WY - Wyoming'}\n  ];\n\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, 'Too Short!')\n      .max(25, 'Too Long!')\n      .required('First name required'),\n    lastName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('Last name required'),\n    Address: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('Address is required'),\n    Address2: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').optional('Address is optional'),\n    City: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('City is required'),\n    State: Yup.string().min(2, 'Too Short!').max(2, 'Too Long').required('State is required'),\n    ZipCode: Yup.string().min(5, 'Too Short!').max(9, 'Too Long').required('ZipCode is required'),\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      Address: '',\n      Address2: '',\n      City: '',\n      State: '',\n      ZipCode: '',\n      email: '',\n      password: ''\n    },\n    validationSchema: RegisterSchema,\n    onSubmit: () => {\n      navigate('/dashboard', { replace: true });\n    }\n  });\n\n  const DropdownExampleSimple = () => (\n    <Menu compact>\n      <Dropdown text='Dropdown' options={States} simple item />\n    </Menu>\n  )\n\n  const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n            <TextField\n              fullWidth\n              label=\"First name\"\n              {...getFieldProps('firstName')}\n              error={Boolean(touched.firstName && errors.firstName)}\n              helperText={touched.firstName && errors.firstName}\n            />\n\n            <TextField\n              fullWidth\n              label=\"Last name\"\n              {...getFieldProps('lastName')}\n              error={Boolean(touched.lastName && errors.lastName)}\n              helperText={touched.lastName && errors.lastName}\n            />\n          </Stack>\n\n          <TextField\n            fullWidth\n            autoComplete=\"address\"\n            type=\"Address\"\n            label=\"Address\"\n            {...getFieldProps('Address')}\n            error={Boolean(touched.Address && errors.Address)}\n            helperText={touched.Address && errors.Address}\n          />\n\n          <TextField\n            fullWidth\n            autoComplete=\"address\"\n            type=\"Address2\"\n            label=\"Address2 (Optional)\"\n            {...getFieldProps('Address2')}\n            error={Boolean(touched.Address2 && errors.Address2)}\n            helperText={touched.Address2 && errors.Address2}\n          />\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n            <TextField\n              fullWidth\n              autoComplete = \"city\"\n              type = \"City\"\n              label = \"City\"\n              {...getFieldProps('City') }\n              error = { Boolean(touched.City && errors.City) }\n              helperText = { touched.City && errors.City }\n            />\n\n            <TextField\n              fullWidth\n              autoComplete=\"state\"\n              type=\"State\"\n              label=\"State\"\n              {...getFieldProps('State')}\n              error={Boolean(touched.State && errors.State)}\n              helperText={touched.State && errors.State}\n            >\n              {/* <div class=\"ui compact menu\">\n                <div role=\"listbox\" aria-expanded=\"false\" class=\"ui item simple dropdown\" tabindex=\"0\">\n                  <div aria-atomic=\"true\" aria-live=\"polite\" role=\"alert\" class=\"divider text\">\n                    Dropdown\n                  </div>\n                  <i aria-hidden=\"true\" class=\"dropdown icon\"></i>\n                  <div class=\"menu transition\">\n                    <div style=\"pointer-events:all\" role=\"option\" aria-checked=\"false\" aria-selected=\"true\" class=\"selected item\">\n                      <span class=\"text\">\n                        Choice 1\n                      </span>\n                    </div>\n                    <div style=\"pointer-events:all\" role=\"option\" aria-checked=\"false\" aria-selected=\"false\" class=\"item\">\n                      <span class=\"text\">\n                        Choice 2\n                      </span>\n                    </div>\n                    <div style=\"pointer-events:all\" role=\"option\" aria-checked=\"false\" aria-selected=\"false\" class=\"item\">\n                      <span class=\"text\">\n                        Choice 3\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div> */}\n            </TextField>\n\n            <TextField\n              fullWidth\n              autoComplete = \"zipcode\"\n              type = \"ZipCode\"\n              label = \"ZipCode\"\n              {...getFieldProps('ZipCode') }\n              error = { Boolean(touched.ZipCode && errors.ZipCode) }\n              helperText = { touched.ZipCode && errors.ZipCode }\n            />\n        </Stack>\n\n        <TextField\n          fullWidth\n          autoComplete = \"username\"\n          type = \"email\"\n          label = \"Email address\"\n          {...getFieldProps('email') }\n          error = { Boolean(touched.email && errors.email) }\n          helperText = { touched.email && errors.email }\n        />\n\n        <TextField\n          fullWidth\n          autoComplete = \"current-password\"\n          type = { showPassword ? 'text' : 'password' }\n          label = \"Password\" {...getFieldProps('password') }\n          InputProps = {\n            {\n              endAdornment: (\n                <InputAdornment position = \"end\" >\n                  <IconButton edge = \"end\"\n                    onClick = {\n                        () => setShowPassword((prev) => !prev)\n                    } >\n                    <Icon icon = { showPassword ? eyeFill : eyeOffFill }/>\n                  </IconButton>\n                </InputAdornment>\n              )\n            }\n          }\n        error = { Boolean(touched.password && errors.password) }\n        helperText = { touched.password && errors.password }\n        />\n\n        <LoadingButton\n          fullWidth\n          size = \"large\"\n          type = \"submit\"\n          variant = \"contained\"\n          loading = { isSubmitting } >\n          Register\n        </LoadingButton>\n        </Stack>\n        </Form>\n        </FormikProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}