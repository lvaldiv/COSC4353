{"ast":null,"code":"var _jsxFileName = \"/Users/leecavazos/Desktop/COSC4353/COSC4353-1/frontend/src/components/authentication/register/RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport * as React from \"react\";\nimport { AutoComplete, ComboBox, MultiColumnComboBox, DropDownList, MultiSelect, DropDownTree } from '@progress/kendo-react-dropdowns';\nimport { useState } from 'react';\nimport { Icon } from '@iconify/react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport { useNavigate } from 'react-router-dom'; // material\n\nimport { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { LoadingButton } from '@mui/lab'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RegisterForm() {\n  _s();\n\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const States = [\"AL - Alabama\", \"AK - Alaska\", \"AZ - Arizona\", \"AR - Arkansas\", \"CA - California\", 'CO - Colorado', \"CT - Connecticut\", \"DE - Delaware\", \"FL - Florida\", \"GA - Georgia\", 'HI - Hawaii', 'ID - Idaho', 'IL - Illinois', 'IN - Indiana', 'IA - Iowa', 'KS - Kansas', 'KY - Kentucky', 'LA - Louisiana', 'ME - Maine', 'MD - Maryland', 'MA - Massachusetts', 'MI - Michigan', 'MN - Minnesota', 'MS - Mississippi', 'MO - Missouri', 'MT - Montana', 'NE - Nebraska', 'NV - Nevada', 'NH - New Hampshire', 'NJ - New Jersey', 'NM - New Mexico', 'NY - New York', 'NC - North Carolina', 'ND - North Dakota', 'OH - Ohio', 'OK - Oklahoma', 'OR - Oregon', 'PA - Pennsylvania', 'RI - Rhode Island', 'SC - South Carolina', 'SD - South Dakota', 'TN - Tennessee', 'TX - Texas', 'UT - Utah', 'VA - Virginia', 'VT - Vermont', 'WA - Washington', 'WI - Wisconsin', 'WV - West Virginia', 'WY - Wyoming'];\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('First name required'),\n    lastName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('Last name required'),\n    Address: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('Address is required'),\n    Address2: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').optional('Address is optional'),\n    City: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('City is required'),\n    State: Yup.string().min(2, 'Too Short!').max(2, 'Too Long').required('State is required'),\n    ZipCode: Yup.string().min(5, 'Too Short!').max(9, 'Too Long').required('ZipCode is required'),\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      Address: '',\n      Address2: '',\n      City: '',\n      State: '',\n      ZipCode: '',\n      email: '',\n      password: ''\n    },\n    validationSchema: RegisterSchema,\n    onSubmit: () => {\n      navigate('/dashboard', {\n        replace: true\n      });\n    }\n  });\n  const {\n    errors,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Stack, {\n          direction: {\n            xs: 'column',\n            sm: 'row'\n          },\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"First name\",\n            ...getFieldProps('firstName'),\n            error: Boolean(touched.firstName && errors.firstName),\n            helperText: touched.firstName && errors.firstName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Last name\",\n            ...getFieldProps('lastName'),\n            error: Boolean(touched.lastName && errors.lastName),\n            helperText: touched.lastName && errors.lastName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"address\",\n          type: \"Address\",\n          label: \"Address\",\n          ...getFieldProps('Address'),\n          error: Boolean(touched.Address && errors.Address),\n          helperText: touched.Address && errors.Address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"address\",\n          type: \"Address2\",\n          label: \"Address2 (Optional)\",\n          ...getFieldProps('Address2'),\n          error: Boolean(touched.Address2 && errors.Address2),\n          helperText: touched.Address2 && errors.Address2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: {\n            xs: 'column',\n            sm: 'row'\n          },\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            autoComplete: \"city\",\n            type: \"City\",\n            label: \"City\",\n            ...getFieldProps('City'),\n            error: Boolean(touched.City && errors.City),\n            helperText: touched.City && errors.City\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            autoComplete: \"state\",\n            type: \"State\",\n            label: \"State\",\n            ...getFieldProps('State'),\n            error: Boolean(touched.State && errors.State),\n            helperText: touched.State && errors.State,\n            DropDownList: true,\n            style: {\n              width: '300px'\n            },\n            data: States\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            autoComplete: \"zipcode\",\n            type: \"ZipCode\",\n            label: \"ZipCode\",\n            ...getFieldProps('ZipCode'),\n            error: Boolean(touched.ZipCode && errors.ZipCode),\n            helperText: touched.ZipCode && errors.ZipCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"username\",\n          type: \"email\",\n          label: \"Email address\",\n          ...getFieldProps('email'),\n          error: Boolean(touched.email && errors.email),\n          helperText: touched.email && errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"current-password\",\n          type: showPassword ? 'text' : 'password',\n          label: \"Password\",\n          ...getFieldProps('password'),\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                edge: \"end\",\n                onClick: () => setShowPassword(prev => !prev),\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  icon: showPassword ? eyeFill : eyeOffFill\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 17\n            }, this)\n          },\n          error: Boolean(touched.password && errors.password),\n          helperText: touched.password && errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          loading: isSubmitting,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RegisterForm, \"TyfXYEpvWDWRGnFGjig1zuRer3M=\", false, function () {\n  return [useNavigate, useFormik];\n});\n\n_c = RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["/Users/leecavazos/Desktop/COSC4353/COSC4353-1/frontend/src/components/authentication/register/RegisterForm.js"],"names":["Yup","React","AutoComplete","ComboBox","MultiColumnComboBox","DropDownList","MultiSelect","DropDownTree","useState","Icon","useFormik","Form","FormikProvider","eyeFill","eyeOffFill","useNavigate","Stack","TextField","IconButton","InputAdornment","LoadingButton","RegisterForm","navigate","showPassword","setShowPassword","States","RegisterSchema","object","shape","firstName","string","min","max","required","lastName","Address","Address2","optional","City","State","ZipCode","email","password","formik","initialValues","validationSchema","onSubmit","replace","errors","touched","handleSubmit","isSubmitting","getFieldProps","xs","sm","Boolean","width","endAdornment","prev"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport * as React from \"react\";\nimport { AutoComplete, ComboBox, MultiColumnComboBox, DropDownList, MultiSelect, DropDownTree } from '@progress/kendo-react-dropdowns';\nimport { useState } from 'react';\nimport { Icon } from '@iconify/react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport { useNavigate } from 'react-router-dom';\n// material\nimport { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n\n// ----------------------------------------------------------------------\n\nexport default function RegisterForm() {\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const States = [\"AL - Alabama\",\n    \"AK - Alaska\",\n    \"AZ - Arizona\",\n    \"AR - Arkansas\",\n    \"CA - California\",\n    'CO - Colorado',\n    \"CT - Connecticut\",\n    \"DE - Delaware\",\n    \"FL - Florida\",\n    \"GA - Georgia\",\n    'HI - Hawaii',\n    'ID - Idaho',\n    'IL - Illinois',\n    'IN - Indiana',\n    'IA - Iowa',\n    'KS - Kansas',\n    'KY - Kentucky',\n    'LA - Louisiana',\n    'ME - Maine',\n    'MD - Maryland',\n    'MA - Massachusetts',\n    'MI - Michigan',\n    'MN - Minnesota',\n    'MS - Mississippi',\n    'MO - Missouri',\n    'MT - Montana',\n    'NE - Nebraska',\n    'NV - Nevada',\n    'NH - New Hampshire',\n    'NJ - New Jersey',\n    'NM - New Mexico',\n    'NY - New York',\n    'NC - North Carolina',\n    'ND - North Dakota',\n    'OH - Ohio',\n    'OK - Oklahoma',\n    'OR - Oregon',\n    'PA - Pennsylvania',\n    'RI - Rhode Island',\n    'SC - South Carolina',\n    'SD - South Dakota',\n    'TN - Tennessee',\n    'TX - Texas',\n    'UT - Utah',\n    'VA - Virginia',\n    'VT - Vermont',\n    'WA - Washington',\n    'WI - Wisconsin',\n    'WV - West Virginia',\n    'WY - Wyoming'];\n\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, 'Too Short!')\n      .max(25, 'Too Long!')\n      .required('First name required'),\n    lastName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('Last name required'),\n    Address: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('Address is required'),\n    Address2: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').optional('Address is optional'),\n    City: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('City is required'),\n    State: Yup.string().min(2, 'Too Short!').max(2, 'Too Long').required('State is required'),\n    ZipCode: Yup.string().min(5, 'Too Short!').max(9, 'Too Long').required('ZipCode is required'),\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      Address: '',\n      Address2: '',\n      City: '',\n      State: '',\n      ZipCode: '',\n      email: '',\n      password: ''\n    },\n    validationSchema: RegisterSchema,\n    onSubmit: () => {\n      navigate('/dashboard', { replace: true });\n    }\n  });\n\n  const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n            <TextField\n              fullWidth\n              label=\"First name\"\n              {...getFieldProps('firstName')}\n              error={Boolean(touched.firstName && errors.firstName)}\n              helperText={touched.firstName && errors.firstName}\n            />\n\n            <TextField\n              fullWidth\n              label=\"Last name\"\n              {...getFieldProps('lastName')}\n              error={Boolean(touched.lastName && errors.lastName)}\n              helperText={touched.lastName && errors.lastName}\n            />\n          </Stack>\n\n          <TextField\n            fullWidth\n            autoComplete=\"address\"\n            type=\"Address\"\n            label=\"Address\"\n            {...getFieldProps('Address')}\n            error={Boolean(touched.Address && errors.Address)}\n            helperText={touched.Address && errors.Address}\n          />\n\n          <TextField\n            fullWidth\n            autoComplete=\"address\"\n            type=\"Address2\"\n            label=\"Address2 (Optional)\"\n            {...getFieldProps('Address2')}\n            error={Boolean(touched.Address2 && errors.Address2)}\n            helperText={touched.Address2 && errors.Address2}\n          />\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n            <TextField\n              fullWidth\n              autoComplete=\"city\"\n              type=\"City\"\n              label=\"City\"\n              {...getFieldProps('City')}\n              error={Boolean(touched.City && errors.City)}\n              helperText={touched.City && errors.City}\n            />\n            <TextField\n              fullWidth\n              autoComplete=\"state\"\n              type=\"State\"\n              label=\"State\"\n              {...getFieldProps('State')}\n              error={Boolean(touched.State && errors.State)}\n              helperText={touched.State && errors.State}\n              DropDownList\n              style={{width: '300px',}}\n              data={States}\n            />\n            <TextField\n              fullWidth\n              autoComplete=\"zipcode\"\n              type=\"ZipCode\"\n              label=\"ZipCode\"\n              {...getFieldProps('ZipCode')}\n              error={Boolean(touched.ZipCode && errors.ZipCode)}\n              helperText={touched.ZipCode && errors.ZipCode}\n            />\n          </Stack>\n          <TextField\n            fullWidth\n            autoComplete=\"username\"\n            type=\"email\"\n            label=\"Email address\"\n            {...getFieldProps('email')}\n            error={Boolean(touched.email && errors.email)}\n            helperText={touched.email && errors.email}\n          />\n\n          <TextField\n            fullWidth\n            autoComplete=\"current-password\"\n            type={showPassword ? 'text' : 'password'}\n            label=\"Password\"\n            {...getFieldProps('password')}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton edge=\"end\" onClick={() => setShowPassword((prev) => !prev)}>\n                    <Icon icon={showPassword ? eyeFill : eyeOffFill} />\n                  </IconButton>\n                </InputAdornment>\n              )\n            }}\n            error={Boolean(touched.password && errors.password)}\n            helperText={touched.password && errors.password}\n          />\n\n          <LoadingButton\n            fullWidth\n            size=\"large\"\n            type=\"submit\"\n            variant=\"contained\"\n            loading={isSubmitting}\n          >\n            Register\n          </LoadingButton>\n        </Stack>\n      </Form>\n    </FormikProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}