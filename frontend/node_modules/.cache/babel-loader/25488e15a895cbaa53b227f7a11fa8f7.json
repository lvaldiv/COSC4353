{"ast":null,"code":"var _jsxFileName = \"/Users/leecavazos/Desktop/COSC4353/COSC4353-1/frontend/src/components/authentication/register/RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport * as React from \"react\";\nimport { AutoComplete, ComboBox, MultiColumnComboBox, DropDownList, MultiSelect, DropDownTree } from '@progress/kendo-react-dropdowns';\nimport { useState } from 'react';\nimport MenuItem from '@mui/material/MenuItem';\nimport { Icon } from '@iconify/react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport { useNavigate } from 'react-router-dom'; // material\n\nimport { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { values } from 'lodash';\nimport Box from '@mui/material/Box';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle'; // import { Dropdown, Menu } from 'semantic-ui-react'\n// ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RegisterForm() {\n  _s();\n\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const [selectedState, setSelectedState] = useState(\"\");\n\n  const stateChanged = event => {\n    setSelectedState(event.target.value);\n  };\n\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('First name required'),\n    lastName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('Last name required'),\n    Address: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('Address is required'),\n    State: Yup.string().required(\"State is required\"),\n    City: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('City is required'),\n    ZipCode: Yup.string().min(5, 'Too Short!').max(9, 'Too Long').required('ZipCode is required'),\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      Address: '',\n      State: '',\n      City: '',\n      ZipCode: '',\n      email: '',\n      password: ''\n    },\n    validationSchema: RegisterSchema,\n    onSubmit: () => {\n      navigate('/dashboard', {\n        replace: true\n      });\n    }\n  });\n  const {\n    errors,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    getFieldProps\n  } = formik; // List of options for the state\n\n  const SelectStates = [{\n    value: 'AL',\n    label: 'AL - Alabama'\n  }, {\n    value: 'AK',\n    label: 'AK - Alaska'\n  }, {\n    value: 'AZ',\n    label: 'AZ - Arizona'\n  }, {\n    value: 'AR',\n    label: 'AR - Arkansas'\n  }, {\n    value: 'CA',\n    label: 'CA - California'\n  }, {\n    value: 'CO',\n    label: 'CO - Colorado'\n  }, {\n    value: 'CT',\n    label: 'CT - Connecticut'\n  }, {\n    value: 'DE',\n    label: 'DE - Delaware'\n  }, {\n    value: 'FL',\n    label: 'FL - Florida'\n  }, {\n    value: 'GA',\n    label: 'GA - Georgia'\n  }, {\n    value: 'HI',\n    label: 'HI - Hawaii'\n  }, {\n    value: 'ID',\n    label: 'ID - Idaho'\n  }, {\n    value: 'IL',\n    label: 'IL - Illinois'\n  }, {\n    value: 'IN',\n    label: 'IN - Indiana'\n  }, {\n    value: 'IA',\n    label: 'IA - Iowa'\n  }, {\n    value: 'KS',\n    label: 'KS - Kansas'\n  }, {\n    value: 'KY',\n    label: 'KY - Kentucky'\n  }, {\n    value: 'LA',\n    label: 'LA - Louisiana'\n  }, {\n    value: 'ME',\n    label: 'ME - Maine'\n  }, {\n    value: 'MD',\n    label: 'MD - Maryland'\n  }, {\n    value: 'MA',\n    label: 'MA - Massachusetts'\n  }, {\n    value: 'MI',\n    label: 'MI - Michigan'\n  }, {\n    value: 'MN',\n    label: 'MN - Minnesota'\n  }, {\n    value: 'MS',\n    label: 'MS - Mississippi'\n  }, {\n    value: 'MO',\n    label: 'MO - Missouri'\n  }, {\n    value: 'MT',\n    label: 'MT - Montana'\n  }, {\n    value: 'NE',\n    label: 'NE - Nebraska'\n  }, {\n    value: 'NV',\n    label: 'NV - Nevada'\n  }, {\n    value: 'NH',\n    label: 'NH - New Hampshire'\n  }, {\n    value: 'NJ',\n    label: 'NJ - New Jersey'\n  }, {\n    value: 'NM',\n    label: 'NM - New Mexico'\n  }, {\n    value: 'NY',\n    label: 'NY - New York'\n  }, {\n    value: 'NC',\n    label: 'NC - North Carolina'\n  }, {\n    value: 'ND',\n    label: 'ND - North Dakota'\n  }, {\n    value: 'OH',\n    label: 'OH - Ohio'\n  }, {\n    value: 'OK',\n    label: 'OK - Oklahoma'\n  }, {\n    value: 'OR',\n    label: 'OR - Oregon'\n  }, {\n    value: 'PA',\n    label: 'PA - Pennsylvania'\n  }, {\n    value: 'RI',\n    label: 'RI - Rhode Island'\n  }, {\n    value: 'SC',\n    label: 'SC - South Carolina'\n  }, {\n    value: 'SD',\n    label: 'SD - South Dakota'\n  }, {\n    value: 'TN',\n    label: 'TN - Tennessee'\n  }, {\n    value: 'TX',\n    label: 'TX - Texas'\n  }, {\n    value: 'UT',\n    label: 'UT - Utah'\n  }, {\n    value: 'VA',\n    label: 'VA - Virginia'\n  }, {\n    value: 'VT',\n    label: 'VT - Vermont'\n  }, {\n    value: 'WA',\n    label: 'WA - Washington'\n  }, {\n    value: 'WI',\n    label: 'WI - Wisconsin'\n  }, {\n    value: 'WV',\n    label: 'WV - West Virginia'\n  }, {\n    value: 'WY',\n    label: 'WY - Wyoming'\n  }];\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Stack, {\n          direction: {\n            xs: 'column',\n            sm: 'row'\n          },\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"First name\",\n            ...getFieldProps('firstName'),\n            error: Boolean(touched.firstName && errors.firstName),\n            helperText: touched.firstName && errors.firstName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Last name\",\n            ...getFieldProps('lastName'),\n            error: Boolean(touched.lastName && errors.lastName),\n            helperText: touched.lastName && errors.lastName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"address\",\n          type: \"Address\",\n          label: \"Address\",\n          ...getFieldProps('Address'),\n          error: Boolean(touched.Address && errors.Address),\n          helperText: touched.Address && errors.Address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          select: true,\n          label: \"State\",\n          value: selectedState,\n          onChange: stateChanged,\n          type: \"State\",\n          ...getFieldProps('State'),\n          error: Boolean(touched.State && errors.State),\n          helperText: touched.State && errors.State,\n          children: SelectStates.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: option.value,\n            children: option.label\n          }, option.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: {\n            xs: 'column',\n            sm: 'row'\n          },\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            autoComplete: \"city\",\n            type: \"City\",\n            label: \"City\",\n            ...getFieldProps('City'),\n            error: Boolean(touched.City && errors.City),\n            helperText: touched.City && errors.City\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            autoComplete: \"zipcode\",\n            type: \"ZipCode\",\n            label: \"ZipCode\",\n            ...getFieldProps('ZipCode'),\n            error: Boolean(touched.ZipCode && errors.ZipCode),\n            helperText: touched.ZipCode && errors.ZipCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"username\",\n          type: \"email\",\n          label: \"Email address\",\n          ...getFieldProps('email'),\n          error: Boolean(touched.email && errors.email),\n          helperText: touched.email && errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"current-password\",\n          type: showPassword ? 'text' : 'password',\n          label: \"Password\",\n          ...getFieldProps('password'),\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                edge: \"end\",\n                onClick: () => setShowPassword(prev => !prev),\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  icon: showPassword ? eyeFill : eyeOffFill\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this)\n          },\n          error: Boolean(touched.password && errors.password),\n          helperText: touched.password && errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          loading: isSubmitting,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n} // import * as Yup from 'yup';\n// import * as React from \"react\";\n// import { AutoComplete, ComboBox, MultiColumnComboBox, DropDownList, MultiSelect, DropDownTree } from '@progress/kendo-react-dropdowns';\n// import { useState } from 'react';\n// import { Icon } from '@iconify/react';\n// import { useFormik, Form, FormikProvider } from 'formik';\n// import eyeFill from '@iconify/icons-eva/eye-fill';\n// import eyeOffFill from '@iconify/icons-eva/eye-off-fill';\n// import { useNavigate } from 'react-router-dom';\n// // material\n// import { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\n// import { LoadingButton } from '@mui/lab';\n// // import { Dropdown, Menu } from 'semantic-ui-react'\n// // ----------------------------------------------------------------------\n// export default function RegisterForm() {\n//   const navigate = useNavigate();\n//   const [showPassword, setShowPassword] = useState(false);\n//   const States = [\n//     {text: 'AL - Alabama'},\n//     {text: \"AK - Alaska\"},\n//     {text: \"AZ - Arizona\"},\n//     {text: \"AR - Arkansas\"},\n//     {text: \"CA - California\"},\n//     {text:'CO - Colorado'},\n//     {text:\"CT - Connecticut\"},\n//     {text:\"DE - Delaware\"},\n//     {text:\"FL - Florida\"},\n//     {text:\"GA - Georgia\"},\n//     {text:'HI - Hawaii'},\n//     {text:'ID - Idaho'},\n//     {text:'IL - Illinois'},\n//     {text:'IN - Indiana'},\n//     {text:'IA - Iowa'},\n//     {text:'KS - Kansas'},\n//     {text:'KY - Kentucky'},\n//     {text:'LA - Louisiana'},\n//     {text:'ME - Maine'},\n//     {text:'MD - Maryland'},\n//     {text:'MA - Massachusetts'},\n//     {text:'MI - Michigan'},\n//     {text:'MN - Minnesota'},\n//     {text:'MS - Mississippi'},\n//     {text:'MO - Missouri'},\n//     {text:'MT - Montana'},\n//     {text:'NE - Nebraska'},\n//     {text:'NV - Nevada'},\n//     {text:'NH - New Hampshire'},\n//     {text:'NJ - New Jersey'},\n//     {text:'NM - New Mexico'},\n//     {text:'NY - New York'},\n//     {text:'NC - North Carolina'},\n//     {text:'ND - North Dakota'},\n//     {text:'OH - Ohio'},\n//     {text:'OK - Oklahoma'},\n//     {text:'OR - Oregon'},\n//     {text:'PA - Pennsylvania'},\n//     {text:'RI - Rhode Island'},\n//     {text:'SC - South Carolina'},\n//     {text:'SD - South Dakota'},\n//     {text:'TN - Tennessee'},\n//     {text:'TX - Texas'},\n//     {text:'UT - Utah'},\n//     {text:'VA - Virginia'},\n//     {text:'VT - Vermont'},\n//     {text:'WA - Washington'},\n//     {text:'WI - Wisconsin'},\n//     {text:'WV - West Virginia'},\n//     {text:'WY - Wyoming'}\n//   ];\n//   const RegisterSchema = Yup.object().shape({\n//     firstName: Yup.string()\n//       .min(2, 'Too Short!')\n//       .max(25, 'Too Long!')\n//       .required('First name required'),\n//     lastName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('Last name required'),\n//     Address: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('Address is required'),\n//     Address2: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').optional('Address is optional'),\n//     City: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('City is required'),\n//     State: Yup.string().min(2, 'Too Short!').max(2, 'Too Long').required('State is required'),\n//     ZipCode: Yup.string().min(5, 'Too Short!').max(9, 'Too Long').required('ZipCode is required'),\n//     email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n//     password: Yup.string().required('Password is required')\n//   });\n//   const formik = useFormik({\n//     initialValues: {\n//       firstName: '',\n//       lastName: '',\n//       Address: '',\n//       Address2: '',\n//       City: '',\n//       State: '',\n//       ZipCode: '',\n//       email: '',\n//       password: ''\n//     },\n//     validationSchema: RegisterSchema,\n//     onSubmit: () => {\n//       navigate('/dashboard', { replace: true });\n//     }\n//   });\n//   // const DropdownExampleSimple = () => (\n//   //   <Menu compact>\n//   //     <Dropdown text='Dropdown' options={States} simple item />\n//   //   </Menu>\n//   // )\n//   const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n//   return (\n//     <FormikProvider value={formik}>\n//       <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n//         <Stack spacing={3}>\n//           <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n//             <TextField\n//               fullWidth\n//               label=\"First name\"\n//               {...getFieldProps('firstName')}\n//               error={Boolean(touched.firstName && errors.firstName)}\n//               helperText={touched.firstName && errors.firstName}\n//             />\n//             <TextField\n//               fullWidth\n//               label=\"Last name\"\n//               {...getFieldProps('lastName')}\n//               error={Boolean(touched.lastName && errors.lastName)}\n//               helperText={touched.lastName && errors.lastName}\n//             />\n//           </Stack>\n//           <TextField\n//             fullWidth\n//             autoComplete=\"address\"\n//             type=\"Address\"\n//             label=\"Address\"\n//             {...getFieldProps('Address')}\n//             error={Boolean(touched.Address && errors.Address)}\n//             helperText={touched.Address && errors.Address}\n//           />\n//           <TextField\n//             fullWidth\n//             autoComplete=\"address\"\n//             type=\"Address2\"\n//             label=\"Address2 (Optional)\"\n//             {...getFieldProps('Address2')}\n//             error={Boolean(touched.Address2 && errors.Address2)}\n//             helperText={touched.Address2 && errors.Address2}\n//           />\n//           <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n//             <TextField\n//               fullWidth\n//               autoComplete = \"city\"\n//               type = \"City\"\n//               label = \"City\"\n//               {...getFieldProps('City') }\n//               error = { Boolean(touched.City && errors.City) }\n//               helperText = { touched.City && errors.City }\n//             />\n//             <TextField\n//               fullWidth\n//               autoComplete=\"state\"\n//               type=\"State\"\n//               label=\"State\"\n//               {...getFieldProps('State')}\n//               error={Boolean(touched.State && errors.State)}\n//               helperText={touched.State && errors.State}\n//             >\n//               {/* <div class=\"ui compact menu\">\n//                 <div role=\"listbox\" aria-expanded=\"false\" class=\"ui item simple dropdown\" tabindex=\"0\">\n//                   <div aria-atomic=\"true\" aria-live=\"polite\" role=\"alert\" class=\"divider text\">\n//                     Dropdown\n//                   </div>\n//                   <i aria-hidden=\"true\" class=\"dropdown icon\"></i>\n//                   <div class=\"menu transition\">\n//                     <div style=\"pointer-events:all\" role=\"option\" aria-checked=\"false\" aria-selected=\"true\" class=\"selected item\">\n//                       <span class=\"text\">\n//                         Choice 1\n//                       </span>\n//                     </div>\n//                     <div style=\"pointer-events:all\" role=\"option\" aria-checked=\"false\" aria-selected=\"false\" class=\"item\">\n//                       <span class=\"text\">\n//                         Choice 2\n//                       </span>\n//                     </div>\n//                     <div style=\"pointer-events:all\" role=\"option\" aria-checked=\"false\" aria-selected=\"false\" class=\"item\">\n//                       <span class=\"text\">\n//                         Choice 3\n//                       </span>\n//                     </div>\n//                   </div>\n//                 </div>\n//               </div> */}\n//             </TextField>\n//             <TextField\n//               fullWidth\n//               autoComplete = \"zipcode\"\n//               type = \"ZipCode\"\n//               label = \"ZipCode\"\n//               {...getFieldProps('ZipCode') }\n//               error = { Boolean(touched.ZipCode && errors.ZipCode) }\n//               helperText = { touched.ZipCode && errors.ZipCode }\n//             />\n//         </Stack>\n//         <TextField\n//           fullWidth\n//           autoComplete = \"username\"\n//           type = \"email\"\n//           label = \"Email address\"\n//           {...getFieldProps('email') }\n//           error = { Boolean(touched.email && errors.email) }\n//           helperText = { touched.email && errors.email }\n//         />\n//         <TextField\n//           fullWidth\n//           autoComplete = \"current-password\"\n//           type = { showPassword ? 'text' : 'password' }\n//           label = \"Password\" {...getFieldProps('password') }\n//           InputProps = {\n//             {\n//               endAdornment: (\n//                 <InputAdornment position = \"end\" >\n//                   <IconButton edge = \"end\"\n//                     onClick = {\n//                         () => setShowPassword((prev) => !prev)\n//                     } >\n//                     <Icon icon = { showPassword ? eyeFill : eyeOffFill }/>\n//                   </IconButton>\n//                 </InputAdornment>\n//               )\n//             }\n//           }\n//         error = { Boolean(touched.password && errors.password) }\n//         helperText = { touched.password && errors.password }\n//         />\n//         <LoadingButton\n//           fullWidth\n//           size = \"large\"\n//           type = \"submit\"\n//           variant = \"contained\"\n//           loading = { isSubmitting } >\n//           Register\n//         </LoadingButton>\n//         </Stack>\n//         </Form>\n//         </FormikProvider>\n//   );\n// }\n\n_s(RegisterForm, \"b8tUuOtU5vNFMCKdWlUS4NnEFnM=\", false, function () {\n  return [useNavigate, useFormik];\n});\n\n_c = RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["/Users/leecavazos/Desktop/COSC4353/COSC4353-1/frontend/src/components/authentication/register/RegisterForm.js"],"names":["Yup","React","AutoComplete","ComboBox","MultiColumnComboBox","DropDownList","MultiSelect","DropDownTree","useState","MenuItem","Icon","useFormik","Form","FormikProvider","eyeFill","eyeOffFill","useNavigate","Stack","TextField","IconButton","InputAdornment","LoadingButton","values","Box","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","RegisterForm","navigate","showPassword","setShowPassword","selectedState","setSelectedState","stateChanged","event","target","value","RegisterSchema","object","shape","firstName","string","min","max","required","lastName","Address","State","City","ZipCode","email","password","formik","initialValues","validationSchema","onSubmit","replace","errors","touched","handleSubmit","isSubmitting","getFieldProps","SelectStates","label","xs","sm","Boolean","map","option","endAdornment","prev"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport * as React from \"react\";\nimport { AutoComplete, ComboBox, MultiColumnComboBox, DropDownList, MultiSelect, DropDownTree } from '@progress/kendo-react-dropdowns';\nimport { useState } from 'react';\nimport MenuItem from '@mui/material/MenuItem'\nimport { Icon } from '@iconify/react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport { useNavigate } from 'react-router-dom';\n// material\nimport { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { values } from 'lodash';\nimport Box from '@mui/material/Box';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n// import { Dropdown, Menu } from 'semantic-ui-react'\n\n// ----------------------------------------------------------------------\n\nexport default function RegisterForm() {\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const [selectedState, setSelectedState] = useState(\"\");\n\n  const stateChanged = (event) =>{\n    setSelectedState(event.target.value);\n  }\n\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, 'Too Short!')\n      .max(25, 'Too Long!')\n      .required('First name required'),\n    lastName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('Last name required'),\n    Address: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('Address is required'),\n    State: Yup.string().required(\"State is required\"),\n    City: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('City is required'),\n    ZipCode: Yup.string().min(5, 'Too Short!').max(9, 'Too Long').required('ZipCode is required'),\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      Address: '',\n      State: '',\n      City: '',\n      ZipCode: '',\n      email: '',\n      password: ''\n    },\n\n    validationSchema: RegisterSchema,\n    onSubmit: () => {\n      navigate('/dashboard', { replace: true });\n    }\n  });\n\n\n  const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n\n  // List of options for the state\n  const SelectStates = [\n    {value: 'AL', label: 'AL - Alabama'},\n    {value: 'AK', label: 'AK - Alaska'},\n    {value: 'AZ', label: 'AZ - Arizona'},\n    {value: 'AR', label: 'AR - Arkansas'},\n    {value: 'CA', label: 'CA - California'},\n    {value: 'CO', label: 'CO - Colorado'},\n    {value: 'CT', label: 'CT - Connecticut'},\n    {value: 'DE', label: 'DE - Delaware'},\n    {value: 'FL', label: 'FL - Florida'},\n    {value: 'GA', label: 'GA - Georgia'},\n    {value: 'HI', label: 'HI - Hawaii'},\n    {value: 'ID', label: 'ID - Idaho'},\n    {value: 'IL', label: 'IL - Illinois'},\n    {value: 'IN', label: 'IN - Indiana'},\n    {value: 'IA', label: 'IA - Iowa'},\n    {value: 'KS', label: 'KS - Kansas'},\n    {value: 'KY', label: 'KY - Kentucky'},\n    {value: 'LA', label: 'LA - Louisiana'},\n    {value: 'ME', label: 'ME - Maine'},\n    {value: 'MD', label: 'MD - Maryland'},\n    {value: 'MA', label: 'MA - Massachusetts'},\n    {value: 'MI', label: 'MI - Michigan'},\n    {value: 'MN', label: 'MN - Minnesota'},\n    {value: 'MS', label: 'MS - Mississippi'},\n    {value: 'MO', label: 'MO - Missouri'},\n    {value: 'MT', label: 'MT - Montana'},\n    {value: 'NE', label: 'NE - Nebraska'},\n    {value: 'NV', label: 'NV - Nevada'},\n    {value: 'NH', label: 'NH - New Hampshire'},\n    {value: 'NJ', label: 'NJ - New Jersey'},\n    {value: 'NM', label: 'NM - New Mexico'},\n    {value: 'NY', label: 'NY - New York'},\n    {value: 'NC', label: 'NC - North Carolina'},\n    {value: 'ND', label: 'ND - North Dakota'},\n    {value: 'OH', label: 'OH - Ohio'},\n    {value: 'OK', label: 'OK - Oklahoma'},\n    {value: 'OR', label: 'OR - Oregon'},\n    {value: 'PA', label: 'PA - Pennsylvania'},\n    {value: 'RI', label: 'RI - Rhode Island'},\n    {value: 'SC', label: 'SC - South Carolina'},\n    {value: 'SD', label: 'SD - South Dakota'},\n    {value: 'TN', label: 'TN - Tennessee'},\n    {value: 'TX', label: 'TX - Texas'},\n    {value: 'UT', label: 'UT - Utah'},\n    {value: 'VA', label: 'VA - Virginia'},\n    {value: 'VT', label: 'VT - Vermont'},\n    {value: 'WA', label: 'WA - Washington'},\n    {value: 'WI', label: 'WI - Wisconsin'},\n    {value: 'WV', label: 'WV - West Virginia'},\n    {value: 'WY', label: 'WY - Wyoming'}\n  ]  \n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n            <TextField\n              fullWidth\n              label=\"First name\"\n              {...getFieldProps('firstName')}\n              error={Boolean(touched.firstName && errors.firstName)}\n              helperText={touched.firstName && errors.firstName}\n            />\n\n            <TextField\n              fullWidth\n              label=\"Last name\"\n              {...getFieldProps('lastName')}\n              error={Boolean(touched.lastName && errors.lastName)}\n              helperText={touched.lastName && errors.lastName}\n            />\n          </Stack>\n\n          <TextField\n            fullWidth\n            autoComplete=\"address\"\n            type=\"Address\"\n            label=\"Address\"\n            {...getFieldProps('Address')}\n            error={Boolean(touched.Address && errors.Address)}\n            helperText={touched.Address && errors.Address}\n          />\n\n          <TextField\n            select\n            label=\"State\"\n            value={selectedState}\n            onChange={stateChanged}\n            type=\"State\"\n            {...getFieldProps('State')}\n            error={Boolean(touched.State && errors.State)}\n            helperText={touched.State && errors.State}\n          >\n            {SelectStates.map((option) => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </TextField>\n\n          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n            <TextField\n              fullWidth\n              autoComplete = \"city\"\n              type = \"City\"\n              label = \"City\"\n              {...getFieldProps('City') }\n              error = { Boolean(touched.City && errors.City) }\n              helperText = { touched.City && errors.City }\n            />\n\n            <TextField\n              fullWidth\n              autoComplete = \"zipcode\"\n              type = \"ZipCode\"\n              label = \"ZipCode\"\n              {...getFieldProps('ZipCode') }\n              error = { Boolean(touched.ZipCode && errors.ZipCode) }\n              helperText = { touched.ZipCode && errors.ZipCode }\n            />\n        </Stack>\n\n        <TextField\n          fullWidth\n          autoComplete = \"username\"\n          type = \"email\"\n          label = \"Email address\"\n          {...getFieldProps('email') }\n          error = { Boolean(touched.email && errors.email) }\n          helperText = { touched.email && errors.email }\n        />\n\n        <TextField\n          fullWidth\n          autoComplete = \"current-password\"\n          type = { showPassword ? 'text' : 'password' }\n          label = \"Password\" {...getFieldProps('password') }\n          InputProps = {\n            {\n              endAdornment: (\n                <InputAdornment position = \"end\" >\n                  <IconButton edge = \"end\"\n                    onClick = {\n                        () => setShowPassword((prev) => !prev)\n                    } >\n                    <Icon icon = { showPassword ? eyeFill : eyeOffFill }/>\n                  </IconButton>\n                </InputAdornment>\n              )\n            }\n          }\n        error = { Boolean(touched.password && errors.password) }\n        helperText = { touched.password && errors.password }\n        />\n\n        <LoadingButton\n          fullWidth\n          size = \"large\"\n          type = \"submit\"\n          variant = \"contained\"\n          loading = { isSubmitting } >\n          Register\n        </LoadingButton>\n        </Stack>\n        </Form>\n        </FormikProvider>\n  );\n}\n\n\n\n\n\n\n// import * as Yup from 'yup';\n// import * as React from \"react\";\n// import { AutoComplete, ComboBox, MultiColumnComboBox, DropDownList, MultiSelect, DropDownTree } from '@progress/kendo-react-dropdowns';\n// import { useState } from 'react';\n// import { Icon } from '@iconify/react';\n// import { useFormik, Form, FormikProvider } from 'formik';\n// import eyeFill from '@iconify/icons-eva/eye-fill';\n// import eyeOffFill from '@iconify/icons-eva/eye-off-fill';\n// import { useNavigate } from 'react-router-dom';\n// // material\n// import { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\n// import { LoadingButton } from '@mui/lab';\n// // import { Dropdown, Menu } from 'semantic-ui-react'\n\n// // ----------------------------------------------------------------------\n\n// export default function RegisterForm() {\n//   const navigate = useNavigate();\n//   const [showPassword, setShowPassword] = useState(false);\n//   const States = [\n//     {text: 'AL - Alabama'},\n//     {text: \"AK - Alaska\"},\n//     {text: \"AZ - Arizona\"},\n//     {text: \"AR - Arkansas\"},\n//     {text: \"CA - California\"},\n//     {text:'CO - Colorado'},\n//     {text:\"CT - Connecticut\"},\n//     {text:\"DE - Delaware\"},\n//     {text:\"FL - Florida\"},\n//     {text:\"GA - Georgia\"},\n//     {text:'HI - Hawaii'},\n//     {text:'ID - Idaho'},\n//     {text:'IL - Illinois'},\n//     {text:'IN - Indiana'},\n//     {text:'IA - Iowa'},\n//     {text:'KS - Kansas'},\n//     {text:'KY - Kentucky'},\n//     {text:'LA - Louisiana'},\n//     {text:'ME - Maine'},\n//     {text:'MD - Maryland'},\n//     {text:'MA - Massachusetts'},\n//     {text:'MI - Michigan'},\n//     {text:'MN - Minnesota'},\n//     {text:'MS - Mississippi'},\n//     {text:'MO - Missouri'},\n//     {text:'MT - Montana'},\n//     {text:'NE - Nebraska'},\n//     {text:'NV - Nevada'},\n//     {text:'NH - New Hampshire'},\n//     {text:'NJ - New Jersey'},\n//     {text:'NM - New Mexico'},\n//     {text:'NY - New York'},\n//     {text:'NC - North Carolina'},\n//     {text:'ND - North Dakota'},\n//     {text:'OH - Ohio'},\n//     {text:'OK - Oklahoma'},\n//     {text:'OR - Oregon'},\n//     {text:'PA - Pennsylvania'},\n//     {text:'RI - Rhode Island'},\n//     {text:'SC - South Carolina'},\n//     {text:'SD - South Dakota'},\n//     {text:'TN - Tennessee'},\n//     {text:'TX - Texas'},\n//     {text:'UT - Utah'},\n//     {text:'VA - Virginia'},\n//     {text:'VT - Vermont'},\n//     {text:'WA - Washington'},\n//     {text:'WI - Wisconsin'},\n//     {text:'WV - West Virginia'},\n//     {text:'WY - Wyoming'}\n//   ];\n\n//   const RegisterSchema = Yup.object().shape({\n//     firstName: Yup.string()\n//       .min(2, 'Too Short!')\n//       .max(25, 'Too Long!')\n//       .required('First name required'),\n//     lastName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('Last name required'),\n//     Address: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('Address is required'),\n//     Address2: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').optional('Address is optional'),\n//     City: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('City is required'),\n//     State: Yup.string().min(2, 'Too Short!').max(2, 'Too Long').required('State is required'),\n//     ZipCode: Yup.string().min(5, 'Too Short!').max(9, 'Too Long').required('ZipCode is required'),\n//     email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n//     password: Yup.string().required('Password is required')\n//   });\n\n//   const formik = useFormik({\n//     initialValues: {\n//       firstName: '',\n//       lastName: '',\n//       Address: '',\n//       Address2: '',\n//       City: '',\n//       State: '',\n//       ZipCode: '',\n//       email: '',\n//       password: ''\n//     },\n//     validationSchema: RegisterSchema,\n//     onSubmit: () => {\n//       navigate('/dashboard', { replace: true });\n//     }\n//   });\n\n//   // const DropdownExampleSimple = () => (\n//   //   <Menu compact>\n//   //     <Dropdown text='Dropdown' options={States} simple item />\n//   //   </Menu>\n//   // )\n\n//   const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n\n//   return (\n//     <FormikProvider value={formik}>\n//       <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n//         <Stack spacing={3}>\n//           <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n//             <TextField\n//               fullWidth\n//               label=\"First name\"\n//               {...getFieldProps('firstName')}\n//               error={Boolean(touched.firstName && errors.firstName)}\n//               helperText={touched.firstName && errors.firstName}\n//             />\n\n//             <TextField\n//               fullWidth\n//               label=\"Last name\"\n//               {...getFieldProps('lastName')}\n//               error={Boolean(touched.lastName && errors.lastName)}\n//               helperText={touched.lastName && errors.lastName}\n//             />\n//           </Stack>\n\n//           <TextField\n//             fullWidth\n//             autoComplete=\"address\"\n//             type=\"Address\"\n//             label=\"Address\"\n//             {...getFieldProps('Address')}\n//             error={Boolean(touched.Address && errors.Address)}\n//             helperText={touched.Address && errors.Address}\n//           />\n\n//           <TextField\n//             fullWidth\n//             autoComplete=\"address\"\n//             type=\"Address2\"\n//             label=\"Address2 (Optional)\"\n//             {...getFieldProps('Address2')}\n//             error={Boolean(touched.Address2 && errors.Address2)}\n//             helperText={touched.Address2 && errors.Address2}\n//           />\n//           <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n//             <TextField\n//               fullWidth\n//               autoComplete = \"city\"\n//               type = \"City\"\n//               label = \"City\"\n//               {...getFieldProps('City') }\n//               error = { Boolean(touched.City && errors.City) }\n//               helperText = { touched.City && errors.City }\n//             />\n\n//             <TextField\n//               fullWidth\n//               autoComplete=\"state\"\n//               type=\"State\"\n//               label=\"State\"\n//               {...getFieldProps('State')}\n//               error={Boolean(touched.State && errors.State)}\n//               helperText={touched.State && errors.State}\n//             >\n//               {/* <div class=\"ui compact menu\">\n//                 <div role=\"listbox\" aria-expanded=\"false\" class=\"ui item simple dropdown\" tabindex=\"0\">\n//                   <div aria-atomic=\"true\" aria-live=\"polite\" role=\"alert\" class=\"divider text\">\n//                     Dropdown\n//                   </div>\n//                   <i aria-hidden=\"true\" class=\"dropdown icon\"></i>\n//                   <div class=\"menu transition\">\n//                     <div style=\"pointer-events:all\" role=\"option\" aria-checked=\"false\" aria-selected=\"true\" class=\"selected item\">\n//                       <span class=\"text\">\n//                         Choice 1\n//                       </span>\n//                     </div>\n//                     <div style=\"pointer-events:all\" role=\"option\" aria-checked=\"false\" aria-selected=\"false\" class=\"item\">\n//                       <span class=\"text\">\n//                         Choice 2\n//                       </span>\n//                     </div>\n//                     <div style=\"pointer-events:all\" role=\"option\" aria-checked=\"false\" aria-selected=\"false\" class=\"item\">\n//                       <span class=\"text\">\n//                         Choice 3\n//                       </span>\n//                     </div>\n//                   </div>\n//                 </div>\n//               </div> */}\n//             </TextField>\n\n//             <TextField\n//               fullWidth\n//               autoComplete = \"zipcode\"\n//               type = \"ZipCode\"\n//               label = \"ZipCode\"\n//               {...getFieldProps('ZipCode') }\n//               error = { Boolean(touched.ZipCode && errors.ZipCode) }\n//               helperText = { touched.ZipCode && errors.ZipCode }\n//             />\n//         </Stack>\n\n//         <TextField\n//           fullWidth\n//           autoComplete = \"username\"\n//           type = \"email\"\n//           label = \"Email address\"\n//           {...getFieldProps('email') }\n//           error = { Boolean(touched.email && errors.email) }\n//           helperText = { touched.email && errors.email }\n//         />\n\n//         <TextField\n//           fullWidth\n//           autoComplete = \"current-password\"\n//           type = { showPassword ? 'text' : 'password' }\n//           label = \"Password\" {...getFieldProps('password') }\n//           InputProps = {\n//             {\n//               endAdornment: (\n//                 <InputAdornment position = \"end\" >\n//                   <IconButton edge = \"end\"\n//                     onClick = {\n//                         () => setShowPassword((prev) => !prev)\n//                     } >\n//                     <Icon icon = { showPassword ? eyeFill : eyeOffFill }/>\n//                   </IconButton>\n//                 </InputAdornment>\n//               )\n//             }\n//           }\n//         error = { Boolean(touched.password && errors.password) }\n//         helperText = { touched.password && errors.password }\n//         />\n\n//         <LoadingButton\n//           fullWidth\n//           size = \"large\"\n//           type = \"submit\"\n//           variant = \"contained\"\n//           loading = { isSubmitting } >\n//           Register\n//         </LoadingButton>\n//         </Stack>\n//         </Form>\n//         </FormikProvider>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}