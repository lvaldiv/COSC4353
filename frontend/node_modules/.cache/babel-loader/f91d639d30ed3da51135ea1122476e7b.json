{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lizthebett\\\\Desktop\\\\COSC4353\\\\frontend\\\\src\\\\components\\\\authentication\\\\register\\\\RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { Icon } from '@iconify/react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport { useNavigate } from 'react-router-dom'; // material\n\nimport { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { LoadingButton } from '@mui/lab'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RegisterForm() {\n  _s();\n\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('First name required'),\n    lastName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('Last name required'),\n    Address: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('Address is required'),\n    Address2: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').optional('Address is optional'),\n    City: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('City is required'),\n    State: Yup.string().min(2, 'Too Short!').max(2, 'Too Long').required('State is required'),\n    ZipCode: Yup.string().min(5, 'Too Short!').max(9, 'Too Long').required('ZipCode is required'),\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      Address: '',\n      Address2: '',\n      City: '',\n      State: '',\n      ZipCode: '',\n      email: '',\n      password: ''\n    },\n    validationSchema: RegisterSchema,\n    onSubmit: () => {\n      navigate('/dashboard', {\n        replace: true\n      });\n    }\n  });\n  const {\n    errors,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Stack, {\n          direction: {\n            xs: 'column',\n            sm: 'row'\n          },\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"First name\",\n            ...getFieldProps('firstName'),\n            error: Boolean(touched.firstName && errors.firstName),\n            helperText: touched.firstName && errors.firstName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Last name\",\n            ...getFieldProps('lastName'),\n            error: Boolean(touched.lastName && errors.lastName),\n            helperText: touched.lastName && errors.lastName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"address\",\n          type: \"Address\",\n          label: \"Address\",\n          ...getFieldProps('Address'),\n          error: Boolean(touched.Address && errors.Address),\n          helperText: touched.Address && errors.Address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"address\",\n          type: \"Address2\",\n          label: \"Address2(Optional)\",\n          ...getFieldProps('Address2'),\n          error: Boolean(touched.Address2 && errors.Address2),\n          helperText: touched.Address2 && errors.Address2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: {\n            xs: 'column',\n            sm: 'row'\n          },\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            autoComplete: \"city\",\n            type: \"City\",\n            label: \"City\",\n            ...getFieldProps('City'),\n            error: Boolean(touched.City && errors.City),\n            helperText: touched.City && errors.City\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            autoComplete: \"state\",\n            type: \"State\",\n            label: \"State\",\n            ...getFieldProps('State'),\n            error: Boolean(touched.State && errors.State),\n            helperText: touched.State && errors.State\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            autoComplete: \"zipcode\",\n            type: \"ZipCode\",\n            label: \"ZipCode\",\n            ...getFieldProps('ZipCode'),\n            error: Boolean(touched.ZipCode && errors.ZipCode),\n            helperText: touched.ZipCode && errors.ZipCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"username\",\n          type: \"email\",\n          label: \"Email address\",\n          ...getFieldProps('email'),\n          error: Boolean(touched.email && errors.email),\n          helperText: touched.email && errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"current-password\",\n          type: showPassword ? 'text' : 'password',\n          label: \"Password\",\n          ...getFieldProps('password'),\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                edge: \"end\",\n                onClick: () => setShowPassword(prev => !prev),\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  icon: showPassword ? eyeFill : eyeOffFill\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }, this)\n          },\n          error: Boolean(touched.password && errors.password),\n          helperText: touched.password && errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          loading: isSubmitting,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this);\n}\n\n_s(RegisterForm, \"TyfXYEpvWDWRGnFGjig1zuRer3M=\", false, function () {\n  return [useNavigate, useFormik];\n});\n\n_c = RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["C:/Users/Lizthebett/Desktop/COSC4353/frontend/src/components/authentication/register/RegisterForm.js"],"names":["Yup","useState","Icon","useFormik","Form","FormikProvider","eyeFill","eyeOffFill","useNavigate","Stack","TextField","IconButton","InputAdornment","LoadingButton","RegisterForm","navigate","showPassword","setShowPassword","RegisterSchema","object","shape","firstName","string","min","max","required","lastName","Address","Address2","optional","City","State","ZipCode","email","password","formik","initialValues","validationSchema","onSubmit","replace","errors","touched","handleSubmit","isSubmitting","getFieldProps","xs","sm","Boolean","endAdornment","prev"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\r\nimport { useState } from 'react';\r\nimport { Icon } from '@iconify/react';\r\nimport { useFormik, Form, FormikProvider } from 'formik';\r\nimport eyeFill from '@iconify/icons-eva/eye-fill';\r\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\r\nimport { useNavigate } from 'react-router-dom';\r\n// material\r\nimport { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function RegisterForm() {\r\n    const navigate = useNavigate();\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const RegisterSchema = Yup.object().shape({\r\n        firstName: Yup.string()\r\n            .min(2, 'Too Short!')\r\n            .max(25, 'Too Long!')\r\n            .required('First name required'),\r\n        lastName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('Last name required'),\r\n        Address: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('Address is required'),\r\n        Address2: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').optional('Address is optional'),\r\n        City: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('City is required'),\r\n        State: Yup.string().min(2, 'Too Short!').max(2, 'Too Long').required('State is required'),\r\n        ZipCode: Yup.string().min(5, 'Too Short!').max(9, 'Too Long').required('ZipCode is required'),\r\n        email: Yup.string().email('Email must be a valid email address').required('Email is required'),\r\n        password: Yup.string().required('Password is required')\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            firstName: '',\r\n            lastName: '',\r\n            Address: '',\r\n            Address2: '',\r\n            City: '',\r\n            State: '',\r\n            ZipCode: '',\r\n            email: '',\r\n            password: ''\r\n        },\r\n        validationSchema: RegisterSchema,\r\n        onSubmit: () => {\r\n            navigate('/dashboard', { replace: true });\r\n        }\r\n    });\r\n\r\n    const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\r\n\r\n    return (\r\n      <FormikProvider value = {formik}>\r\n        <Form autoComplete = \"off\" noValidate onSubmit = { handleSubmit } >\r\n          <Stack spacing = { 3 } >\r\n            <Stack direction = { { xs: 'column', sm: 'row' } } spacing = { 2 } >\r\n              <TextField\r\n                fullWidth\r\n                label = \"First name\"\r\n                {...getFieldProps('firstName') }\r\n                error = { Boolean(touched.firstName && errors.firstName) }\r\n                helperText = { touched.firstName && errors.firstName }\r\n              />\r\n\r\n        <TextField\r\n          fullWidth\r\n          label = \"Last name\"\r\n          {...getFieldProps('lastName') }\r\n          error = { Boolean(touched.lastName && errors.lastName) }\r\n          helperText = { touched.lastName && errors.lastName }\r\n        />\r\n      </Stack>\r\n\r\n      <TextField\r\n        fullWidth\r\n        autoComplete = \"address\"\r\n        type = \"Address\"\r\n        label = \"Address\"\r\n        {...getFieldProps('Address') }\r\n        error = { Boolean(touched.Address && errors.Address) }\r\n        helperText = { touched.Address && errors.Address }\r\n        />\r\n\r\n        <TextField\r\n          fullWidth\r\n          autoComplete = \"address\"\r\n          type = \"Address2\"\r\n          label = \"Address2(Optional)\"\r\n          {...getFieldProps('Address2') }\r\n          error = { Boolean(touched.Address2 && errors.Address2) }\r\n          helperText = { touched.Address2 && errors.Address2 }\r\n        />\r\n\r\n        <Stack direction = {{ xs: 'column', sm: 'row' }} spacing = { 2 } >\r\n\r\n          <TextField\r\n            fullWidth\r\n            autoComplete = \"city\"\r\n            type = \"City\"\r\n            label = \"City\"\r\n            {...getFieldProps('City') }\r\n            error = { Boolean(touched.City && errors.City) }\r\n            helperText = { touched.City && errors.City }\r\n          />\r\n\r\n          <TextField\r\n            fullWidth\r\n            autoComplete = \"state\"\r\n            type = \"State\"\r\n            label = \"State\"\r\n            {...getFieldProps('State') }\r\n            error = { Boolean(touched.State && errors.State) }\r\n            helperText = { touched.State && errors.State }\r\n          />\r\n\r\n          <TextField\r\n            fullWidth\r\n            autoComplete = \"zipcode\"\r\n            type = \"ZipCode\"\r\n            label = \"ZipCode\"\r\n            {...getFieldProps('ZipCode') }\r\n            error = { Boolean(touched.ZipCode && errors.ZipCode) }\r\n            helperText = { touched.ZipCode && errors.ZipCode }\r\n          />\r\n        </Stack>\r\n\r\n        <TextField\r\n          fullWidth\r\n          autoComplete = \"username\"\r\n          type = \"email\"\r\n          label = \"Email address\"\r\n          {...getFieldProps('email') }\r\n          error = { Boolean(touched.email && errors.email) }\r\n          helperText = { touched.email && errors.email }\r\n        />\r\n\r\n        <TextField\r\n          fullWidth\r\n          autoComplete = \"current-password\"\r\n          type = { showPassword ? 'text' : 'password' }\r\n          label = \"Password\" {...getFieldProps('password') }\r\n          InputProps = {\r\n            {\r\n              endAdornment: (\r\n                <InputAdornment position = \"end\" >\r\n                  <IconButton edge = \"end\"\r\n                    onClick = {\r\n                        () => setShowPassword((prev) => !prev)\r\n                    } >\r\n                    <Icon icon = { showPassword ? eyeFill : eyeOffFill }/>\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              )\r\n            }\r\n          }\r\n        error = { Boolean(touched.password && errors.password) }\r\n        helperText = { touched.password && errors.password }\r\n        />\r\n\r\n        <LoadingButton\r\n          fullWidth\r\n          size = \"large\"\r\n          type = \"submit\"\r\n          variant = \"contained\"\r\n          loading = { isSubmitting } >\r\n          Register\r\n        </LoadingButton>\r\n      </Stack>\r\n    </Form>\r\n  </FormikProvider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}