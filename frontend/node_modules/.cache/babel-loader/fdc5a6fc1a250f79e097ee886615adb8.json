{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lizthebett\\\\Desktop\\\\COSC4353\\\\frontend\\\\src\\\\components\\\\authentication\\\\register\\\\RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { Icon } from '@iconify/react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport { useNavigate } from 'react-router-dom'; // material\n\nimport { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { LoadingButton } from '@mui/lab'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RegisterForm() {\n  _s();\n\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('First name required'),\n    lastName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('Last name required'),\n    Address: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('Address is required'),\n    Address2: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').optional('Address is optional'),\n    City: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('City is required'),\n    State: Yup.string().min(2, 'Too Short!').max(2, 'Too Long').required('State is required'),\n    ZipCode: Yup.string().min(5, 'Too Short!').max(9, 'Too Long').required('ZipCode is required'),\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      Address: '',\n      Address2: '',\n      City: '',\n      State: '',\n      ZipCode: '',\n      email: '',\n      password: ''\n    },\n    validationSchema: RegisterSchema,\n    onSubmit: () => {\n      navigate('/dashboard', {\n        replace: true\n      });\n    }\n  });\n  const STATES = [{\n    value: 'Default',\n    label: 'Select State'\n  }, {\n    value: 'AL',\n    label: 'Alabama'\n  }, {\n    value: 'AK',\n    label: 'Alaska'\n  }, {\n    value: 'AZ',\n    label: 'Arizona'\n  }, {\n    value: 'AR',\n    label: 'Arkansas'\n  }, {\n    value: 'CA',\n    label: 'California'\n  }, {\n    value: 'CO',\n    label: 'Colorado'\n  }, {\n    value: 'CT',\n    label: 'Connecticuit'\n  }, {\n    value: 'DE',\n    label: 'Delaware'\n  }, {\n    value: 'FL',\n    label: 'Florida'\n  }, {\n    value: 'GA',\n    label: 'Georgia'\n  }, {\n    value: 'HI',\n    label: 'Hawaii'\n  }, {\n    value: 'ID',\n    label: 'Idaho'\n  }, {\n    value: 'IL',\n    label: 'Illinois'\n  }, {\n    value: 'IN',\n    label: 'Indiana'\n  }, {\n    value: 'IA',\n    label: 'Iowa'\n  }, {\n    value: 'KS',\n    label: 'Kansas'\n  }, {\n    value: 'KY',\n    label: 'Kentucky'\n  }, {\n    value: 'LA',\n    label: 'Louisiana'\n  }, {\n    value: 'ME',\n    label: 'Maine'\n  }, {\n    value: 'MD',\n    label: 'Maryland'\n  }, {\n    value: 'MA',\n    label: 'Massachusetts'\n  }, {\n    value: 'MI',\n    label: 'Michigan'\n  }, {\n    value: 'MN',\n    label: 'Minnesota'\n  }, {\n    value: 'MS',\n    label: 'Mississippi'\n  }, {\n    value: 'MO',\n    label: 'Missouri'\n  }, {\n    value: 'MT',\n    label: 'Montana'\n  }, {\n    value: 'NE',\n    label: 'Nebraska'\n  }, {\n    value: 'NV',\n    label: 'Nevada'\n  }, {\n    value: 'NH',\n    label: 'New Hampshire'\n  }, {\n    value: 'NJ',\n    label: 'New Jersey'\n  }, {\n    value: 'NM',\n    label: 'New Mexico'\n  }, {\n    value: 'NY',\n    label: 'New York'\n  }, {\n    value: 'NC',\n    label: 'North Carolina'\n  }, {\n    value: 'ND',\n    label: 'North Dakota'\n  }, {\n    value: 'OH',\n    label: 'Ohio'\n  }, {\n    value: 'OK',\n    label: 'Oklahoma'\n  }, {\n    value: 'OR',\n    label: 'Oregon'\n  }, {\n    value: 'PA',\n    label: 'Pennsylvania'\n  }, {\n    value: 'RI',\n    label: 'Rhode Island'\n  }, {\n    value: 'SC',\n    label: 'South Carolina'\n  }, {\n    value: 'SD',\n    label: 'South Dakota'\n  }, {\n    value: 'TN',\n    label: 'Tennessee'\n  }, {\n    value: 'TX',\n    label: 'Texas'\n  }, {\n    value: 'VA',\n    label: 'Virginia'\n  }, {\n    value: 'WA',\n    label: 'Washington'\n  }, {\n    value: 'WV',\n    label: 'West Virgina'\n  }, {\n    value: 'WI',\n    label: 'Wisconsin'\n  }, {\n    value: 'WY',\n    label: 'Wyoming'\n  }];\n  const {\n    errors,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Stack, {\n          direction: {\n            xs: 'column',\n            sm: 'row'\n          },\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"First name\",\n            ...getFieldProps('firstName'),\n            error: Boolean(touched.firstName && errors.firstName),\n            helperText: touched.firstName && errors.firstName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"Last name\",\n            ...getFieldProps('lastName'),\n            error: Boolean(touched.lastName && errors.lastName),\n            helperText: touched.lastName && errors.lastName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 9\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"address\",\n          type: \"Address\",\n          label: \"Address\",\n          ...getFieldProps('Address'),\n          error: Boolean(touched.Address && errors.Address),\n          helperText: touched.Address && errors.Address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"address\",\n          type: \"Address2\",\n          label: \"Address2(Optional)\",\n          ...getFieldProps('Address2'),\n          error: Boolean(touched.Address2 && errors.Address2),\n          helperText: touched.Address2 && errors.Address2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: {\n            xs: 'column',\n            sm: 'row'\n          },\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            autoComplete: \"city\",\n            type: \"City\",\n            label: \"City\",\n            ...getFieldProps('City'),\n            error: Boolean(touched.City && errors.City),\n            helperText: touched.City && errors.City\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 9\n          }, this), \" \", /*#__PURE__*/_jsxDEV(MenuPopover, {\n            open: open,\n            onClose: handleClose,\n            anchorEl: anchorRef.current,\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                py: 1\n              },\n              children: [\" \", STATES.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n                selected: option.value === STATES[0].value,\n                onClick: handleClose,\n                sx: {\n                  py: 1,\n                  px: 2.5\n                },\n                children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n                  primaryTypographyProps: {\n                    variant: 'body2'\n                  },\n                  children: [\" \", option.label, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 17\n                }, this), \" \"]\n              }, option.value, true, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 38\n              }, this)), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 9\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 12\n          }, this), \" \", /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            autoComplete: \"zipcode\",\n            type: \"ZipCode\",\n            label: \"ZipCode\",\n            ...getFieldProps('ZipCode'),\n            error: Boolean(touched.ZipCode && errors.ZipCode),\n            helperText: touched.ZipCode && errors.ZipCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 23\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 9\n        }, this), \" \", /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"username\",\n          type: \"email\",\n          label: \"Email address\",\n          ...getFieldProps('email'),\n          error: Boolean(touched.email && errors.email),\n          helperText: touched.email && errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"current-password\",\n          type: showPassword ? 'text' : 'password',\n          label: \"Password\",\n          ...getFieldProps('password'),\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                edge: \"end\",\n                onClick: () => setShowPassword(prev => !prev),\n                children: [/*#__PURE__*/_jsxDEV(Icon, {\n                  icon: showPassword ? eyeFill : eyeOffFill\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 361,\n                  columnNumber: 21\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 21\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 33\n            }, this)\n          },\n          error: Boolean(touched.password && errors.password),\n          helperText: touched.password && errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          loading: isSubmitting,\n          children: \"Register \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 9\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 14\n  }, this);\n}\n\n_s(RegisterForm, \"TyfXYEpvWDWRGnFGjig1zuRer3M=\", false, function () {\n  return [useNavigate, useFormik];\n});\n\n_c = RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["C:/Users/Lizthebett/Desktop/COSC4353/frontend/src/components/authentication/register/RegisterForm.js"],"names":["Yup","useState","Icon","useFormik","Form","FormikProvider","eyeFill","eyeOffFill","useNavigate","Stack","TextField","IconButton","InputAdornment","LoadingButton","RegisterForm","navigate","showPassword","setShowPassword","RegisterSchema","object","shape","firstName","string","min","max","required","lastName","Address","Address2","optional","City","State","ZipCode","email","password","formik","initialValues","validationSchema","onSubmit","replace","STATES","value","label","errors","touched","handleSubmit","isSubmitting","getFieldProps","xs","sm","Boolean","open","handleClose","anchorRef","current","py","map","option","px","variant","endAdornment","prev"],"mappings":";;;AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,cAA1B,QAAgD,QAAhD;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AACA,SAASC,WAAT,QAA4B,kBAA5B,C,CACA;;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,cAAvC,QAA6D,eAA7D;AACA,SAASC,aAAT,QAA8B,UAA9B,C,CAEA;;;AAEA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACnC,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAMiB,cAAc,GAAGlB,GAAG,CAACmB,MAAJ,GAAaC,KAAb,CAAmB;AACtCC,IAAAA,SAAS,EAAErB,GAAG,CAACsB,MAAJ,GACNC,GADM,CACF,CADE,EACC,YADD,EAENC,GAFM,CAEF,EAFE,EAEE,WAFF,EAGNC,QAHM,CAGG,qBAHH,CAD2B;AAKtCC,IAAAA,QAAQ,EAAE1B,GAAG,CAACsB,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,YAApB,EAAkCC,GAAlC,CAAsC,EAAtC,EAA0C,WAA1C,EAAuDC,QAAvD,CAAgE,oBAAhE,CAL4B;AAMtCE,IAAAA,OAAO,EAAE3B,GAAG,CAACsB,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,YAApB,EAAkCC,GAAlC,CAAsC,GAAtC,EAA2C,UAA3C,EAAuDC,QAAvD,CAAgE,qBAAhE,CAN6B;AAOtCG,IAAAA,QAAQ,EAAE5B,GAAG,CAACsB,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,YAApB,EAAkCC,GAAlC,CAAsC,GAAtC,EAA2C,UAA3C,EAAuDK,QAAvD,CAAgE,qBAAhE,CAP4B;AAQtCC,IAAAA,IAAI,EAAE9B,GAAG,CAACsB,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,YAApB,EAAkCC,GAAlC,CAAsC,GAAtC,EAA2C,UAA3C,EAAuDC,QAAvD,CAAgE,kBAAhE,CARgC;AAStCM,IAAAA,KAAK,EAAE/B,GAAG,CAACsB,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,YAApB,EAAkCC,GAAlC,CAAsC,CAAtC,EAAyC,UAAzC,EAAqDC,QAArD,CAA8D,mBAA9D,CAT+B;AAUtCO,IAAAA,OAAO,EAAEhC,GAAG,CAACsB,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,YAApB,EAAkCC,GAAlC,CAAsC,CAAtC,EAAyC,UAAzC,EAAqDC,QAArD,CAA8D,qBAA9D,CAV6B;AAWtCQ,IAAAA,KAAK,EAAEjC,GAAG,CAACsB,MAAJ,GAAaW,KAAb,CAAmB,qCAAnB,EAA0DR,QAA1D,CAAmE,mBAAnE,CAX+B;AAYtCS,IAAAA,QAAQ,EAAElC,GAAG,CAACsB,MAAJ,GAAaG,QAAb,CAAsB,sBAAtB;AAZ4B,GAAnB,CAAvB;AAeA,QAAMU,MAAM,GAAGhC,SAAS,CAAC;AACrBiC,IAAAA,aAAa,EAAE;AACXf,MAAAA,SAAS,EAAE,EADA;AAEXK,MAAAA,QAAQ,EAAE,EAFC;AAGXC,MAAAA,OAAO,EAAE,EAHE;AAIXC,MAAAA,QAAQ,EAAE,EAJC;AAKXE,MAAAA,IAAI,EAAE,EALK;AAMXC,MAAAA,KAAK,EAAE,EANI;AAOXC,MAAAA,OAAO,EAAE,EAPE;AAQXC,MAAAA,KAAK,EAAE,EARI;AASXC,MAAAA,QAAQ,EAAE;AATC,KADM;AAYrBG,IAAAA,gBAAgB,EAAEnB,cAZG;AAarBoB,IAAAA,QAAQ,EAAE,MAAM;AACZvB,MAAAA,QAAQ,CAAC,YAAD,EAAe;AAAEwB,QAAAA,OAAO,EAAE;AAAX,OAAf,CAAR;AACH;AAfoB,GAAD,CAAxB;AAkBA,QAAMC,MAAM,GAAG,CAAC;AACRC,IAAAA,KAAK,EAAE,SADC;AAERC,IAAAA,KAAK,EAAE;AAFC,GAAD,EAIX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAJW,EAQX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GARW,EAYX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAZW,EAgBX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAhBW,EAoBX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GApBW,EAwBX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAxBW,EA4BX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GA5BW,EAgCX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAhCW,EAoCX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GApCW,EAwCX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAxCW,EA4CX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GA5CW,EAgDX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAhDW,EAoDX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GApDW,EAwDX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAxDW,EA4DX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GA5DW,EAgEX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAhEW,EAoEX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GApEW,EAwEX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAxEW,EA4EX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GA5EW,EAgFX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAhFW,EAoFX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GApFW,EAwFX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAxFW,EA4FX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GA5FW,EAgGX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAhGW,EAoGX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GApGW,EAwGX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAxGW,EA4GX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GA5GW,EAgHX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAhHW,EAoHX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GApHW,EAwHX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAxHW,EA4HX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GA5HW,EAgIX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAhIW,EAoIX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GApIW,EAwIX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAxIW,EA4IX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GA5IW,EAgJX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAhJW,EAoJX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GApJW,EAwJX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAxJW,EA4JX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GA5JW,EAgKX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAhKW,EAoKX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GApKW,EAwKX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAxKW,EA4KX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GA5KW,EAgLX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAhLW,EAoLX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GApLW,EAwLX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAxLW,EA4LX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GA5LW,EAgMX;AACID,IAAAA,KAAK,EAAE,IADX;AAEIC,IAAAA,KAAK,EAAE;AAFX,GAhMW,CAAf;AAsMA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,OAAV;AAAmBC,IAAAA,YAAnB;AAAiCC,IAAAA,YAAjC;AAA+CC,IAAAA;AAA/C,MAAiEZ,MAAvE;AAEA,sBAAS,QACL,cADK;AACU,IAAA,KAAK,EAAKA,MADpB;AAAA,4BAEL,QACA,IADA;AACK,MAAA,YAAY,EAAG,KADpB;AAEA,MAAA,UAAU,MAFV;AAEW,MAAA,QAAQ,EAAKU,YAFxB;AAAA,8BAGA,QACA,KADA;AACM,QAAA,OAAO,EAAK,CADlB;AAAA,gCAEA,QACA,KADA;AACM,UAAA,SAAS,EACX;AAAEG,YAAAA,EAAE,EAAE,QAAN;AAAgBC,YAAAA,EAAE,EAAE;AAApB,WAFJ;AAGA,UAAA,OAAO,EAAK,CAHZ;AAAA,kCAIA,QACA,SADA;AACU,YAAA,SAAS,MADnB;AACoB,YAAA,KAAK,EAAG,YAD5B;AAAA,eAC6CF,aAAa,CAAC,WAAD,CAD1D;AAEA,YAAA,KAAK,EAAKG,OAAO,CAACN,OAAO,CAACvB,SAAR,IAAqBsB,MAAM,CAACtB,SAA7B,CAFjB;AAGA,YAAA,UAAU,EAAKuB,OAAO,CAACvB,SAAR,IAAqBsB,MAAM,CAACtB;AAH3C;AAAA;AAAA;AAAA;AAAA,kBAJA,eAUA,QACA,SADA;AACU,YAAA,SAAS,MADnB;AACoB,YAAA,KAAK,EAAG,WAD5B;AAAA,eAC4C0B,aAAa,CAAC,UAAD,CADzD;AAEA,YAAA,KAAK,EAAKG,OAAO,CAACN,OAAO,CAAClB,QAAR,IAAoBiB,MAAM,CAACjB,QAA5B,CAFjB;AAGA,YAAA,UAAU,EAAKkB,OAAO,CAAClB,QAAR,IAAoBiB,MAAM,CAACjB;AAH1C;AAAA;AAAA;AAAA;AAAA,kBAVA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA,eAmBA,QACA,SADA;AACU,UAAA,SAAS,MADnB;AACoB,UAAA,YAAY,EAAG,SADnC;AAEA,UAAA,IAAI,EAAG,SAFP;AAGA,UAAA,KAAK,EAAG,SAHR;AAAA,aAGsBqB,aAAa,CAAC,SAAD,CAHnC;AAIA,UAAA,KAAK,EAAKG,OAAO,CAACN,OAAO,CAACjB,OAAR,IAAmBgB,MAAM,CAAChB,OAA3B,CAJjB;AAKA,UAAA,UAAU,EAAKiB,OAAO,CAACjB,OAAR,IAAmBgB,MAAM,CAAChB;AALzC;AAAA;AAAA;AAAA;AAAA,gBAnBA,eA2BA,QACA,SADA;AACU,UAAA,SAAS,MADnB;AACoB,UAAA,YAAY,EAAG,SADnC;AAEA,UAAA,IAAI,EAAG,UAFP;AAGA,UAAA,KAAK,EAAG,oBAHR;AAAA,aAGiCoB,aAAa,CAAC,UAAD,CAH9C;AAIA,UAAA,KAAK,EAAKG,OAAO,CAACN,OAAO,CAAChB,QAAR,IAAoBe,MAAM,CAACf,QAA5B,CAJjB;AAKA,UAAA,UAAU,EAAKgB,OAAO,CAAChB,QAAR,IAAoBe,MAAM,CAACf;AAL1C;AAAA;AAAA;AAAA;AAAA,gBA3BA,eAmCA,QACA,KADA;AACM,UAAA,SAAS,EACX;AAAEoB,YAAAA,EAAE,EAAE,QAAN;AAAgBC,YAAAA,EAAE,EAAE;AAApB,WAFJ;AAGA,UAAA,OAAO,EAAK,CAHZ;AAAA,kCAIA,QACA,SADA;AACU,YAAA,SAAS,MADnB;AACoB,YAAA,YAAY,EAAG,MADnC;AAEA,YAAA,IAAI,EAAG,MAFP;AAGA,YAAA,KAAK,EAAG,MAHR;AAAA,eAGmBF,aAAa,CAAC,MAAD,CAHhC;AAIA,YAAA,KAAK,EAAKG,OAAO,CAACN,OAAO,CAACd,IAAR,IAAgBa,MAAM,CAACb,IAAxB,CAJjB;AAKA,YAAA,UAAU,EAAKc,OAAO,CAACd,IAAR,IAAgBa,MAAM,CAACb;AALtC;AAAA;AAAA;AAAA;AAAA,kBAJA,oBAUG,QACH,WADG;AACS,YAAA,IAAI,EAAKqB,IADlB;AAEH,YAAA,OAAO,EAAKC,WAFT;AAGH,YAAA,QAAQ,EAAKC,SAAS,CAACC,OAHpB;AAAA,oCAIH,QACA,GADA;AACI,cAAA,EAAE,EACF;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAFJ;AAAA,8BAGIf,MAAM,CAACgB,GAAP,CAAYC,MAAD,iBAAc,QACrB,QADqB;AAErB,gBAAA,QAAQ,EAAKA,MAAM,CAAChB,KAAP,KAAiBD,MAAM,CAAC,CAAD,CAAN,CAAUC,KAFnB;AAGrB,gBAAA,OAAO,EAAKW,WAHS;AAIrB,gBAAA,EAAE,EACE;AAAEG,kBAAAA,EAAE,EAAE,CAAN;AAASG,kBAAAA,EAAE,EAAE;AAAb,iBALiB;AAAA,wCAMrB,QACA,YADA;AACa,kBAAA,sBAAsB,EAC/B;AAAEC,oBAAAA,OAAO,EAAE;AAAX,mBAFJ;AAAA,kCAE+BF,MAAM,CAACf,KAFtC;AAAA;AAAA;AAAA;AAAA;AAAA,wBANqB;AAAA,iBACJe,MAAM,CAAChB,KADH;AAAA;AAAA;AAAA;AAAA,sBAAzB,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJG;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVH,oBA2Cc,QACd,SADc;AACJ,YAAA,SAAS,MADL;AACM,YAAA,YAAY,EAAG,SADrB;AAEd,YAAA,IAAI,EAAG,SAFO;AAGd,YAAA,KAAK,EAAG,SAHM;AAAA,eAGQM,aAAa,CAAC,SAAD,CAHrB;AAId,YAAA,KAAK,EAAKG,OAAO,CAACN,OAAO,CAACZ,OAAR,IAAmBW,MAAM,CAACX,OAA3B,CAJH;AAKd,YAAA,UAAU,EAAKY,OAAO,CAACZ,OAAR,IAAmBW,MAAM,CAACX;AAL3B;AAAA;AAAA;AAAA;AAAA,kBA3Cd;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnCA,oBAqFQ,QACR,SADQ;AACE,UAAA,SAAS,MADX;AACY,UAAA,YAAY,EAAG,UAD3B;AAER,UAAA,IAAI,EAAG,OAFC;AAGR,UAAA,KAAK,EAAG,eAHA;AAAA,aAGoBe,aAAa,CAAC,OAAD,CAHjC;AAIR,UAAA,KAAK,EAAKG,OAAO,CAACN,OAAO,CAACX,KAAR,IAAiBU,MAAM,CAACV,KAAzB,CAJT;AAKR,UAAA,UAAU,EAAKW,OAAO,CAACX,KAAR,IAAiBU,MAAM,CAACV;AAL/B;AAAA;AAAA;AAAA;AAAA,gBArFR,eA6FA,QACA,SADA;AACU,UAAA,SAAS,MADnB;AACoB,UAAA,YAAY,EAAG,kBADnC;AAEA,UAAA,IAAI,EAAKjB,YAAY,GAAG,MAAH,GAAY,UAFjC;AAGA,UAAA,KAAK,EAAG,UAHR;AAAA,aAGuB+B,aAAa,CAAC,UAAD,CAHpC;AAIA,UAAA,UAAU,EACN;AACIa,YAAAA,YAAY,eAAI,QACZ,cADY;AACG,cAAA,QAAQ,EAAG,KADd;AAAA,sCAEZ,QACA,UADA;AACW,gBAAA,IAAI,EAAG,KADlB;AAEA,gBAAA,OAAO,EACH,MAAM3C,eAAe,CAAE4C,IAAD,IAAU,CAACA,IAAZ,CAHzB;AAAA,wCAIA,QACA,IADA;AACK,kBAAA,IAAI,EAAK7C,YAAY,GAAGV,OAAH,GAAaC;AADvC;AAAA;AAAA;AAAA;AAAA,wBAJA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFY;AAAA;AAAA;AAAA;AAAA;AAAA;AADpB,WALJ;AAoBA,UAAA,KAAK,EAAK2C,OAAO,CAACN,OAAO,CAACV,QAAR,IAAoBS,MAAM,CAACT,QAA5B,CApBjB;AAqBA,UAAA,UAAU,EAAKU,OAAO,CAACV,QAAR,IAAoBS,MAAM,CAACT;AArB1C;AAAA;AAAA;AAAA;AAAA,gBA7FA,eAqHA,QACA,aADA;AACc,UAAA,SAAS,MADvB;AACwB,UAAA,IAAI,EAAG,OAD/B;AAEA,UAAA,IAAI,EAAG,QAFP;AAGA,UAAA,OAAO,EAAG,WAHV;AAIA,UAAA,OAAO,EAAKY,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBArHA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFK;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AAqIH;;GAlXuBhC,Y;UACHN,W,EAkBFL,S;;;KAnBKW,Y","sourcesContent":["import * as Yup from 'yup';\r\nimport { useState } from 'react';\r\nimport { Icon } from '@iconify/react';\r\nimport { useFormik, Form, FormikProvider } from 'formik';\r\nimport eyeFill from '@iconify/icons-eva/eye-fill';\r\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\r\nimport { useNavigate } from 'react-router-dom';\r\n// material\r\nimport { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function RegisterForm() {\r\n    const navigate = useNavigate();\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const RegisterSchema = Yup.object().shape({\r\n        firstName: Yup.string()\r\n            .min(2, 'Too Short!')\r\n            .max(25, 'Too Long!')\r\n            .required('First name required'),\r\n        lastName: Yup.string().min(2, 'Too Short!').max(25, 'Too Long!').required('Last name required'),\r\n        Address: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('Address is required'),\r\n        Address2: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').optional('Address is optional'),\r\n        City: Yup.string().min(2, 'Too Short!').max(100, 'Too Long').required('City is required'),\r\n        State: Yup.string().min(2, 'Too Short!').max(2, 'Too Long').required('State is required'),\r\n        ZipCode: Yup.string().min(5, 'Too Short!').max(9, 'Too Long').required('ZipCode is required'),\r\n        email: Yup.string().email('Email must be a valid email address').required('Email is required'),\r\n        password: Yup.string().required('Password is required')\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            firstName: '',\r\n            lastName: '',\r\n            Address: '',\r\n            Address2: '',\r\n            City: '',\r\n            State: '',\r\n            ZipCode: '',\r\n            email: '',\r\n            password: ''\r\n        },\r\n        validationSchema: RegisterSchema,\r\n        onSubmit: () => {\r\n            navigate('/dashboard', { replace: true });\r\n        }\r\n    });\r\n\r\n    const STATES = [{\r\n            value: 'Default',\r\n            label: 'Select State'\r\n        },\r\n        {\r\n            value: 'AL',\r\n            label: 'Alabama'\r\n        },\r\n        {\r\n            value: 'AK',\r\n            label: 'Alaska'\r\n        },\r\n        {\r\n            value: 'AZ',\r\n            label: 'Arizona'\r\n        },\r\n        {\r\n            value: 'AR',\r\n            label: 'Arkansas'\r\n        },\r\n        {\r\n            value: 'CA',\r\n            label: 'California'\r\n        },\r\n        {\r\n            value: 'CO',\r\n            label: 'Colorado'\r\n        },\r\n        {\r\n            value: 'CT',\r\n            label: 'Connecticuit'\r\n        },\r\n        {\r\n            value: 'DE',\r\n            label: 'Delaware'\r\n        },\r\n        {\r\n            value: 'FL',\r\n            label: 'Florida'\r\n        },\r\n        {\r\n            value: 'GA',\r\n            label: 'Georgia'\r\n        },\r\n        {\r\n            value: 'HI',\r\n            label: 'Hawaii'\r\n        },\r\n        {\r\n            value: 'ID',\r\n            label: 'Idaho'\r\n        },\r\n        {\r\n            value: 'IL',\r\n            label: 'Illinois'\r\n        },\r\n        {\r\n            value: 'IN',\r\n            label: 'Indiana'\r\n        },\r\n        {\r\n            value: 'IA',\r\n            label: 'Iowa'\r\n        },\r\n        {\r\n            value: 'KS',\r\n            label: 'Kansas'\r\n        },\r\n        {\r\n            value: 'KY',\r\n            label: 'Kentucky'\r\n        },\r\n        {\r\n            value: 'LA',\r\n            label: 'Louisiana'\r\n        },\r\n        {\r\n            value: 'ME',\r\n            label: 'Maine'\r\n        },\r\n        {\r\n            value: 'MD',\r\n            label: 'Maryland'\r\n        },\r\n        {\r\n            value: 'MA',\r\n            label: 'Massachusetts'\r\n        },\r\n        {\r\n            value: 'MI',\r\n            label: 'Michigan'\r\n        },\r\n        {\r\n            value: 'MN',\r\n            label: 'Minnesota'\r\n        },\r\n        {\r\n            value: 'MS',\r\n            label: 'Mississippi'\r\n        },\r\n        {\r\n            value: 'MO',\r\n            label: 'Missouri'\r\n        },\r\n        {\r\n            value: 'MT',\r\n            label: 'Montana'\r\n        },\r\n        {\r\n            value: 'NE',\r\n            label: 'Nebraska'\r\n        },\r\n        {\r\n            value: 'NV',\r\n            label: 'Nevada'\r\n        },\r\n        {\r\n            value: 'NH',\r\n            label: 'New Hampshire'\r\n        },\r\n        {\r\n            value: 'NJ',\r\n            label: 'New Jersey'\r\n        },\r\n        {\r\n            value: 'NM',\r\n            label: 'New Mexico'\r\n        },\r\n        {\r\n            value: 'NY',\r\n            label: 'New York'\r\n        },\r\n        {\r\n            value: 'NC',\r\n            label: 'North Carolina'\r\n        },\r\n        {\r\n            value: 'ND',\r\n            label: 'North Dakota'\r\n        },\r\n        {\r\n            value: 'OH',\r\n            label: 'Ohio'\r\n        },\r\n        {\r\n            value: 'OK',\r\n            label: 'Oklahoma'\r\n        },\r\n        {\r\n            value: 'OR',\r\n            label: 'Oregon'\r\n        },\r\n        {\r\n            value: 'PA',\r\n            label: 'Pennsylvania'\r\n        },\r\n        {\r\n            value: 'RI',\r\n            label: 'Rhode Island'\r\n        },\r\n        {\r\n            value: 'SC',\r\n            label: 'South Carolina'\r\n        },\r\n        {\r\n            value: 'SD',\r\n            label: 'South Dakota'\r\n        },\r\n        {\r\n            value: 'TN',\r\n            label: 'Tennessee'\r\n        },\r\n        {\r\n            value: 'TX',\r\n            label: 'Texas'\r\n        },\r\n        {\r\n            value: 'VA',\r\n            label: 'Virginia'\r\n        },\r\n        {\r\n            value: 'WA',\r\n            label: 'Washington'\r\n        },\r\n        {\r\n            value: 'WV',\r\n            label: 'West Virgina'\r\n        },\r\n        {\r\n            value: 'WI',\r\n            label: 'Wisconsin'\r\n        },\r\n        {\r\n            value: 'WY',\r\n            label: 'Wyoming'\r\n        }\r\n    ]\r\n\r\n    const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\r\n\r\n    return ( <\r\n        FormikProvider value = { formik } >\r\n        <\r\n        Form autoComplete = \"off\"\r\n        noValidate onSubmit = { handleSubmit } >\r\n        <\r\n        Stack spacing = { 3 } >\r\n        <\r\n        Stack direction = {\r\n            { xs: 'column', sm: 'row' } }\r\n        spacing = { 2 } >\r\n        <\r\n        TextField fullWidth label = \"First name\" {...getFieldProps('firstName') }\r\n        error = { Boolean(touched.firstName && errors.firstName) }\r\n        helperText = { touched.firstName && errors.firstName }\r\n        />\r\n\r\n        <\r\n        TextField fullWidth label = \"Last name\" {...getFieldProps('lastName') }\r\n        error = { Boolean(touched.lastName && errors.lastName) }\r\n        helperText = { touched.lastName && errors.lastName }\r\n        /> <\r\n        /Stack>\r\n\r\n        <\r\n        TextField fullWidth autoComplete = \"address\"\r\n        type = \"Address\"\r\n        label = \"Address\" {...getFieldProps('Address') }\r\n        error = { Boolean(touched.Address && errors.Address) }\r\n        helperText = { touched.Address && errors.Address }\r\n        />\r\n\r\n        <\r\n        TextField fullWidth autoComplete = \"address\"\r\n        type = \"Address2\"\r\n        label = \"Address2(Optional)\" {...getFieldProps('Address2') }\r\n        error = { Boolean(touched.Address2 && errors.Address2) }\r\n        helperText = { touched.Address2 && errors.Address2 }\r\n        />\r\n\r\n        <\r\n        Stack direction = {\r\n            { xs: 'column', sm: 'row' } }\r\n        spacing = { 2 } >\r\n        <\r\n        TextField fullWidth autoComplete = \"city\"\r\n        type = \"City\"\r\n        label = \"City\" {...getFieldProps('City') }\r\n        error = { Boolean(touched.City && errors.City) }\r\n        helperText = { touched.City && errors.City }\r\n        /> <\r\n        MenuPopover open = { open }\r\n        onClose = { handleClose }\r\n        anchorEl = { anchorRef.current } >\r\n        <\r\n        Box sx = {\r\n            { py: 1 } } > {\r\n            STATES.map((option) => ( <\r\n                MenuItem key = { option.value }\r\n                selected = { option.value === STATES[0].value }\r\n                onClick = { handleClose }\r\n                sx = {\r\n                    { py: 1, px: 2.5 } } >\r\n                <\r\n                ListItemText primaryTypographyProps = {\r\n                    { variant: 'body2' } } > { option.label } <\r\n                /ListItemText> <\r\n                /MenuItem>\r\n            ))\r\n        } <\r\n        /Box>\r\n\r\n\r\n\r\n        {\r\n            /* fullWidth\r\n                          autoComplete=\"state\"\r\n                          type=\"State\"\r\n                          label=\"State\"\r\n                          {...getFieldProps('State')}\r\n                          error={Boolean(touched.State && errors.State)}\r\n                          helperText={touched.State && errors.State} */\r\n        } <\r\n        /MenuPopover> <\r\n        TextField fullWidth autoComplete = \"zipcode\"\r\n        type = \"ZipCode\"\r\n        label = \"ZipCode\" {...getFieldProps('ZipCode') }\r\n        error = { Boolean(touched.ZipCode && errors.ZipCode) }\r\n        helperText = { touched.ZipCode && errors.ZipCode }\r\n        /> <\r\n        /Stack> <\r\n        TextField fullWidth autoComplete = \"username\"\r\n        type = \"email\"\r\n        label = \"Email address\" {...getFieldProps('email') }\r\n        error = { Boolean(touched.email && errors.email) }\r\n        helperText = { touched.email && errors.email }\r\n        />\r\n\r\n        <\r\n        TextField fullWidth autoComplete = \"current-password\"\r\n        type = { showPassword ? 'text' : 'password' }\r\n        label = \"Password\" {...getFieldProps('password') }\r\n        InputProps = {\r\n            {\r\n                endAdornment: ( <\r\n                    InputAdornment position = \"end\" >\r\n                    <\r\n                    IconButton edge = \"end\"\r\n                    onClick = {\r\n                        () => setShowPassword((prev) => !prev) } >\r\n                    <\r\n                    Icon icon = { showPassword ? eyeFill : eyeOffFill }\r\n                    /> <\r\n                    /IconButton> <\r\n                    /InputAdornment>\r\n                )\r\n            }\r\n        }\r\n        error = { Boolean(touched.password && errors.password) }\r\n        helperText = { touched.password && errors.password }\r\n        />\r\n\r\n        <\r\n        LoadingButton fullWidth size = \"large\"\r\n        type = \"submit\"\r\n        variant = \"contained\"\r\n        loading = { isSubmitting } >\r\n        Register <\r\n        /LoadingButton> <\r\n        /Stack> <\r\n        /Form> <\r\n        /FormikProvider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}